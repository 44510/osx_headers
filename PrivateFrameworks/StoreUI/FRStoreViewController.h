//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSViewController.h"

@class FRNavigationController, FRProgressOverlayView, FRToolbarManager, FRWKView, FRWindowBackgroundView, NSDate, NSMutableArray, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSTimer, NSToolbar, NSView<FRStoreContentView>;

@interface FRStoreViewController : NSViewController
{
    NSView<FRStoreContentView> *_contentViewToHideOnPageLoad;
    NSView<FRStoreContentView> *_contentViewToShowOnPageLoad;
    BOOL _visibleWebViewLoaded;
    NSTimer *_activityIndicatorTimer;
    BOOL _willShowLoadingActivityIndictor;
    NSDate *_bagLoadStartDate;
    BOOL _bagInitialLoadCompleted;
    NSMutableArray *_urlEventsToHandleOnBagUpdate;
    NSMutableArray *_openFileEventsToHandleOnBagUpdate;
    BOOL _lastVisiblePageLoadFailed;
    BOOL _storeIsUnreachable;
    BOOL _bagFailedToLoad;
    BOOL _webViewSwitchIsPending;
    BOOL _launchedFromNotification;
    BOOL _updateAllOnUpdatesPageLoad;
    BOOL _showLinearLoadingProgress;
    FRToolbarManager *_toolbarManager;
    NSView<FRStoreContentView> *_primaryWebView;
    NSMutableDictionary *_additionalWebViews;
    NSMutableDictionary *_contentViewControllers;
    NSToolbar *_toolbar;
    FRNavigationController *_navigationController;
    NSView<FRStoreContentView> *_currentContentView;
    NSMutableDictionary *_navigationItems;
    CDUnknownBlockType _purchaseAnimationHandler;
    CDUnknownBlockType _pageLoadingProgressHandler;
    NSMutableArray *_downloads;
    NSDate *_startDate;
    struct OpaqueWKPageGroup *_pageGroup;
    NSMutableArray *_processContexts;
    NSObject<OS_dispatch_queue> *_initialLoadQueue;
    NSMutableDictionary *_delayedInitialLoads;
    FRProgressOverlayView *_progressOverlayView;
}

+ (id)nativeViewControllerWithIdentifier:(id)arg1;
@property(retain) FRProgressOverlayView *progressOverlayView; // @synthesize progressOverlayView=_progressOverlayView;
@property(readonly) NSMutableDictionary *delayedInitialLoads; // @synthesize delayedInitialLoads=_delayedInitialLoads;
@property(readonly) NSObject<OS_dispatch_queue> *initialLoadQueue; // @synthesize initialLoadQueue=_initialLoadQueue;
@property(readonly) NSMutableArray *processContexts; // @synthesize processContexts=_processContexts;
@property(readonly) struct OpaqueWKPageGroup *pageGroup; // @synthesize pageGroup=_pageGroup;
@property(retain) NSDate *startDate; // @synthesize startDate=_startDate;
@property(readonly) NSMutableArray *downloads; // @synthesize downloads=_downloads;
@property(copy) CDUnknownBlockType pageLoadingProgressHandler; // @synthesize pageLoadingProgressHandler=_pageLoadingProgressHandler;
@property BOOL showLinearLoadingProgress; // @synthesize showLinearLoadingProgress=_showLinearLoadingProgress;
@property(copy) CDUnknownBlockType purchaseAnimationHandler; // @synthesize purchaseAnimationHandler=_purchaseAnimationHandler;
@property BOOL updateAllOnUpdatesPageLoad; // @synthesize updateAllOnUpdatesPageLoad=_updateAllOnUpdatesPageLoad;
@property BOOL launchedFromNotification; // @synthesize launchedFromNotification=_launchedFromNotification;
@property BOOL webViewSwitchIsPending; // @synthesize webViewSwitchIsPending=_webViewSwitchIsPending;
@property(nonatomic) BOOL bagFailedToLoad; // @synthesize bagFailedToLoad=_bagFailedToLoad;
@property(nonatomic) BOOL storeIsUnreachable; // @synthesize storeIsUnreachable=_storeIsUnreachable;
@property(nonatomic) BOOL lastVisiblePageLoadFailed; // @synthesize lastVisiblePageLoadFailed=_lastVisiblePageLoadFailed;
@property(readonly) NSMutableDictionary *navigationItems; // @synthesize navigationItems=_navigationItems;
@property(retain) NSView<FRStoreContentView> *currentContentView; // @synthesize currentContentView=_currentContentView;
@property(retain) FRNavigationController *navigationController; // @synthesize navigationController=_navigationController;
@property(retain) NSToolbar *toolbar; // @synthesize toolbar=_toolbar;
@property(retain) NSMutableDictionary *contentViewControllers; // @synthesize contentViewControllers=_contentViewControllers;
@property(retain) NSMutableDictionary *additionalWebViews; // @synthesize additionalWebViews=_additionalWebViews;
@property(retain) NSView<FRStoreContentView> *primaryWebView; // @synthesize primaryWebView=_primaryWebView;
@property(retain) FRToolbarManager *toolbarManager; // @synthesize toolbarManager=_toolbarManager;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (struct WKContextInjectedBundleClientV1)bundleClientWithIdentifier:(id)arg1;
- (id)injectedBundleInitializationUserData;
- (id)_downloadInfoForWKDownload:(struct OpaqueWKDownload *)arg1;
- (struct WKContextDownloadClientV0)downloadClient;
- (struct WKContextHistoryClientV0)historyClient;
- (struct WKPageContextMenuClientV3)contextMenuClient;
- (struct WKPageUIClientV2)uiClient;
- (struct WKPagePolicyClientV1)policyClientWithWebView:(id)arg1;
- (struct WKPageLoaderClientV4)loadClientWithWebView:(id)arg1;
- (void)didSelectCustomSharingServiceWithInfo:(id)arg1;
- (id)defaultWindowID;
- (void)modalStoreWindowWillClose:(id)arg1;
- (void)_handleRedirectNotification:(id)arg1;
- (void)_handleReloadNotification:(id)arg1;
- (void)_handleGoBackNotification:(id)arg1;
- (void)_handleLoadStorefrontNotification:(id)arg1;
- (void)_handleSignoutNotification:(id)arg1;
- (void)_unregisterForDaemonNotifications;
- (void)_registerForDaemonNotifications;
- (void)handleGetURLEvent:(id)arg1 withReplyEvent:(id)arg2;
- (BOOL)application:(id)arg1 openFile:(id)arg2;
- (BOOL)_handleOpenFileWithBagLoaded:(id)arg1;
- (void)_handleURLEventWithBagLoaded:(id)arg1;
- (BOOL)_handleActionURL:(id)arg1;
- (id)_appendContinuation:(id)arg1 toURL:(id)arg2;
- (BOOL)_restrictActionURL:(id)arg1;
- (BOOL)_canHandleOpenFileEventWithFile:(id)arg1;
- (id)_fileTypeForFile:(id)arg1 queryKey:(id *)arg2;
- (void)_loadingActivityTimerFired:(id)arg1;
- (void)stopLoadingActivityIndicator;
- (void)startLoadingActivityIndicatorTimer;
- (void)viewWillBeHidden;
- (void)viewDidBecomeVisible;
- (void)removeListenerForAppIsFrontmostChanged;
- (void)addListenerForAppIsFrontmostChanged;
- (void)handleAppIsFrontmostChangedNotification:(id)arg1;
- (void)viewSource:(id)arg1;
- (void)showWebKitInspector:(id)arg1;
- (void)reload:(id)arg1;
- (void)emulateGoForward:(id)arg1;
- (void)emulateGoBackward:(id)arg1;
- (void)startSearch:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (struct CGRect)convertPageRectToScreenRect:(struct CGRect)arg1;
- (void)reachabilityChanged:(id)arg1;
- (void)_storeStateDidChange;
- (long long)_noConnectionWindowBackgroundStyle;
- (void)searchStoreWithString:(id)arg1;
- (void)showPurchasesPage;
- (void)showUpdatesPageAndScanForOSUpdates:(BOOL)arg1 forceFullScan:(BOOL)arg2 launchedFromNotification:(BOOL)arg3;
- (void)loadRequest:(id)arg1;
- (void)loadHTML:(id)arg1;
- (void)goToStorefront;
- (void)goToURL:(id)arg1;
- (BOOL)allowUnsignedBag;
- (void)bagFailed:(id)arg1 withError:(id)arg2;
- (void)bagDidUpdate:(id)arg1;
- (void)removeContentViewControllerWithIdentifier:(id)arg1;
- (void)addContentViewController:(id)arg1 withIdentifier:(id)arg2;
- (void)adjustPrimaryWebViewContent;
@property(readonly) FRWKView *currentWebView;
- (void)_performDelayedInitialLoads;
- (void)_visibleWebViewInitialLoadCommitted;
- (void)clearHistory;
- (void)removeWebViewWithIdentifier:(id)arg1;
- (void)addWebViewWithIdentifier:(id)arg1 loadURL:(id)arg2;
- (id)_createWebViewWithIdentifier:(id)arg1;
- (struct OpaqueWKContext *)_createWebProcessContextWithIdentifier:(id)arg1;
- (void)showContentView:(id)arg1 loadURL:(id)arg2 didStartPageLoad:(char *)arg3;
- (BOOL)_contentView:(id)arg1 canGoForwardToURL:(id)arg2;
- (BOOL)_contentView:(id)arg1 canGoBackToURL:(id)arg2;
- (BOOL)_url:(id)arg1 isEqualToBackForwardListItem:(struct OpaqueWKBackForwardListItem *)arg2;
- (void)_performDelayedContentViewSwap;
- (id)contentViewWithIdentifier:(id)arg1;
- (BOOL)isMainStoreViewController;
- (void)dealloc;
@property(readonly) FRWindowBackgroundView *backgroundView; // @dynamic backgroundView;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

