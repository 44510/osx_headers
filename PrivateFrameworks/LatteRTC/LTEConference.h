//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "WRMClientDelegate.h"

@class AVAudioPayload, DTMFEventHandler, LTEAudioSessionConfig, NSMutableArray, NSObject<LTEConferenceDelegate>, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, VCJitterBuffer, WRMClient;

__attribute__((visibility("hidden")))
@interface LTEConference : NSObject <WRMClientDelegate>
{
    int audioTimeStampDelta;
    int numBufferBytesAvailable;
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
    double dAudioHostTime;
    double _rtpTimeoutEnabledTime;
    double _rtcpTimeoutEnabledTime;
    double lastRTPTimeoutReportTime;
    double lastRTCPTimeoutReportTime;
    struct tagHANDLE *rtpHandle;
    char *bundleBuffer;
    unsigned int conferenceID;
    unsigned int lastSentAudioSampleTime;
    unsigned int packetTimeoutCheckCounter;
    long long sampleRate;
    long long samplesPerFrame;
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } stateLock;
    struct _opaque_pthread_mutex_t sessionLock;
    NSMutableArray *audioPayloads;
    struct AudioStreamBasicDescription vpioFormat;
    int preferredAudioCodec;
    DTMFEventHandler *dtmfEventHandler;
    WRMClient *wrmClient;
    AVAudioPayload *currentAudioPayload;
    VCJitterBuffer *vcJitterBuffer;
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;
    int state;
    BOOL isValid;
    NSObject<LTEConferenceDelegate> *_delegate;
    LTEAudioSessionConfig *_sessionConfig;
}

@property(retain, nonatomic) LTEAudioSessionConfig *sessionConfig; // @synthesize sessionConfig=_sessionConfig;
@property(nonatomic) NSObject<LTEConferenceDelegate> *delegate; // @synthesize delegate=_delegate;
@property BOOL isValid; // @synthesize isValid;
@property(readonly) unsigned int conferenceID; // @synthesize conferenceID;
- (void)wrmClient:(id)arg1 setMetricConfig:(CDStruct_ed381b5a *)arg2;
- (_Bool)onPlaySound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 averagePower:(float)arg5;
- (void)stopSendDTMFEvent;
- (void)sendDTMFEvent:(id)arg1;
- (_Bool)onCaptureSound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned int)arg9;
- (void)stopPausedHeartbeat;
- (void)startPausedHeartbeat;
- (void)setPauseAudio:(BOOL)arg1;
- (void)stopCall;
- (void)startCall;
- (void)setRtcpSendInterval:(double)arg1;
- (void)setRtcpTimeOutInterval:(double)arg1;
- (void)setRtpTimeOutInterval:(double)arg1;
- (void)setRtcpTimeOutEnabled:(BOOL)arg1;
- (void)setRtpTimeOutEnabled:(BOOL)arg1;
- (void)setRtcpEnabled:(BOOL)arg1;
- (void)setStreamDirection:(long long)arg1;
- (void)prepareForCall;
- (void)setupRTPPayloadsWithDestinationIPPort:(struct tagIPPORT *)arg1;
- (id)supportedAudioPayloads;
- (void)setAudioSessionConfig:(id)arg1 withError:(id *)arg2;
- (BOOL)configureAudioSessionWithConfiguration:(id)arg1 error:(id *)arg2;
- (id)setupRTPWithSockets:(id)arg1 error:(id *)arg2;
- (id)setupRTPWithLocalParticipantInfo:(id)arg1 error:(id *)arg2;
- (id)setLocalParticipantInfo:(id)arg1 networkSockets:(id)arg2 withError:(id *)arg3;
- (void)dealloc;
- (id)init;
- (void)checkPacketTimeouts;
- (void)reportRTCPPackets:(struct tagRTCPPACKET *)arg1 withCount:(int)arg2;
- (void)reportWRMMetrics:(CDStruct_dd9362d3 *)arg1;
- (BOOL)setRTPPayloads:(int *)arg1 numPayloads:(int)arg2 withError:(id *)arg3;
- (id)addAudioPayload:(int)arg1;
- (BOOL)setupAudioCodecWithPayload:(int)arg1;
- (BOOL)choosePayload:(int *)arg1 count:(int)arg2;
- (int)sendSamples:(char *)arg1 numEncodedBytes:(int)arg2 withPayload:(int)arg3 timeStamp:(unsigned int)arg4 bufferedSamples:(int)arg5 hasNewSamples:(BOOL)arg6;
- (int)encodeAudio:(void *)arg1 numInputBytes:(int)arg2 outputBytes:(void *)arg3 numOutputBytes:(int)arg4 withPayload:(int *)arg5;
- (BOOL)allocateBundleBuffer;
- (BOOL)setupAudioEncoders;
- (void)stopAudioWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)startAudioWithCompletionHandler:(CDUnknownBlockType)arg1;
- (unsigned int)codecTypeFromAudioPayload:(int)arg1;
- (void)pullDecodedMeshMode:(char *)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (int)captureMeshMode:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 bufferedSamples:(int)arg5 hostTime:(double)arg6;
- (void)unlock;
- (void)lock;

@end

