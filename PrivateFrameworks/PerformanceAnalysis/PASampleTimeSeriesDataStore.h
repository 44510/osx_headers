//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSSecureCoding.h"

@class NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, PABinaryLocator, PAGenealogyTracker, PAMountStatusTracker, PASampleTimeInsensitiveTaskData, PASymbolDataStore;

@interface PASampleTimeSeriesDataStore : NSObject <NSSecureCoding>
{
    NSMutableDictionary *_timeInsensitiveTaskDataDict;
    NSMutableArray *_timeSensitiveSampleDataArray;
    double _startMachTimestamp;
    double _endMachTimestamp;
    double _startWallTimestamp;
    double _endWallTimestamp;
    BOOL _sanitizePaths;
    BOOL _omitThirdPartyProcessStacks;
    NSMutableArray *_fanSpeedArray;
    PAGenealogyTracker *_genealogyTracker;
    PAMountStatusTracker *_mountStatusTracker;
    PABinaryLocator *_binaryLocator;
    PASymbolDataStore *_symbolDataStore;
    NSMutableDictionary *_symbolHandleCache;
    NSMutableDictionary *_oldSymbolHandleCache;
    NSMutableSet *_pidsToTrack;
    BOOL _expectsLiveProcesses;
    BOOL _shouldPreemptivelyCacheSymbolicators;
    int _targetProcessId;
    PASampleTimeInsensitiveTaskData *_targetTask;
    unsigned long long _targetThreadId;
    unsigned int _cpuPercent;
    unsigned int _cpuDuration;
    unsigned int _wakeupsPerSec;
    unsigned int _wakeupsDuration;
    NSString *_event;
    NSString *_eventNote;
    NSString *_signature;
    double _extraDuration;
    NSString *_durationNote;
    NSString *_stepsNote;
    double _attemptedSamplingInterval;
    NSString *_kextStat;
    NSString *_kernelVersion;
    NSString *_osProductVersion;
    NSString *_osBuildVersion;
    NSString *_machineArchitecture;
    unsigned int _workQueueSoftThreadLimit;
    unsigned int _workQueueHardThreadLimit;
    NSString *_hardwareModel;
    unsigned int _numActiveCPUs;
    NSString *_targetProcessBundleVersion;
    NSString *_targetProcessBundleShortVersion;
    NSString *_targetProcessBundleBuildVersion;
    NSString *_targetProcessBundleProjectName;
    NSString *_targetProcessBundleSourceVersion;
    NSString *_targetProcessCommerceAppID;
    NSString *_targetProcessCommerceExternalID;
}

+ (BOOL)supportsSecureCoding;
@property BOOL expectsLiveProcesses; // @synthesize expectsLiveProcesses=_expectsLiveProcesses;
@property BOOL shouldPreemptivelyCacheSymbolicators; // @synthesize shouldPreemptivelyCacheSymbolicators=_shouldPreemptivelyCacheSymbolicators;
@property(readonly) unsigned int numActiveCPUs; // @synthesize numActiveCPUs=_numActiveCPUs;
@property(readonly) NSString *hardwareModel; // @synthesize hardwareModel=_hardwareModel;
@property(readonly) unsigned int workQueueHardThreadLimit; // @synthesize workQueueHardThreadLimit=_workQueueHardThreadLimit;
@property(readonly) unsigned int workQueueSoftThreadLimit; // @synthesize workQueueSoftThreadLimit=_workQueueSoftThreadLimit;
@property(readonly) NSString *machineArchitecture; // @synthesize machineArchitecture=_machineArchitecture;
@property(readonly) NSString *osBuildVersion; // @synthesize osBuildVersion=_osBuildVersion;
@property(readonly) NSString *osProductVersion; // @synthesize osProductVersion=_osProductVersion;
@property(readonly) NSString *kernelVersion; // @synthesize kernelVersion=_kernelVersion;
@property(readonly) NSString *kextStat; // @synthesize kextStat=_kextStat;
@property(copy) NSString *stepsNote; // @synthesize stepsNote=_stepsNote;
@property(copy) NSString *durationNote; // @synthesize durationNote=_durationNote;
@property double extraDuration; // @synthesize extraDuration=_extraDuration;
@property(copy) NSString *signature; // @synthesize signature=_signature;
@property(copy) NSString *eventNote; // @synthesize eventNote=_eventNote;
@property(copy) NSString *event; // @synthesize event=_event;
@property unsigned int wakeupsDuration; // @synthesize wakeupsDuration=_wakeupsDuration;
@property unsigned int wakeupsPerSec; // @synthesize wakeupsPerSec=_wakeupsPerSec;
@property unsigned int cpuDuration; // @synthesize cpuDuration=_cpuDuration;
@property unsigned int cpuPercent; // @synthesize cpuPercent=_cpuPercent;
@property unsigned long long targetThreadId; // @synthesize targetThreadId=_targetThreadId;
@property(readonly) NSString *targetProcessCommerceExternalID; // @synthesize targetProcessCommerceExternalID=_targetProcessCommerceExternalID;
@property(readonly) NSString *targetProcessCommerceAppID; // @synthesize targetProcessCommerceAppID=_targetProcessCommerceAppID;
@property(readonly) NSString *targetProcessBundleSourceVersion; // @synthesize targetProcessBundleSourceVersion=_targetProcessBundleSourceVersion;
@property(readonly) NSString *targetProcessBundleProjectName; // @synthesize targetProcessBundleProjectName=_targetProcessBundleProjectName;
@property(readonly) NSString *targetProcessBundleBuildVersion; // @synthesize targetProcessBundleBuildVersion=_targetProcessBundleBuildVersion;
@property(readonly) NSString *targetProcessBundleShortVersion; // @synthesize targetProcessBundleShortVersion=_targetProcessBundleShortVersion;
@property(readonly) NSString *targetProcessBundleVersion; // @synthesize targetProcessBundleVersion=_targetProcessBundleVersion;
@property int targetProcessId; // @synthesize targetProcessId=_targetProcessId;
@property BOOL omitThirdPartyProcessStacks; // @synthesize omitThirdPartyProcessStacks=_omitThirdPartyProcessStacks;
@property BOOL sanitizePaths; // @synthesize sanitizePaths=_sanitizePaths;
@property(readonly) PAGenealogyTracker *genealogyTracker; // @synthesize genealogyTracker=_genealogyTracker;
@property(readonly) PAMountStatusTracker *mountStatusTracker; // @synthesize mountStatusTracker=_mountStatusTracker;
@property(readonly) NSArray *samples; // @synthesize samples=_timeSensitiveSampleDataArray;
@property double attemptedSamplingInterval; // @synthesize attemptedSamplingInterval=_attemptedSamplingInterval;
@property(readonly) double endWallTimestamp; // @synthesize endWallTimestamp=_endWallTimestamp;
@property(readonly) double startWallTimestamp; // @synthesize startWallTimestamp=_startWallTimestamp;
@property(readonly) double endMachTimestamp; // @synthesize endMachTimestamp=_endMachTimestamp;
@property(readonly) double startMachTimestamp; // @synthesize startMachTimestamp=_startMachTimestamp;
- (void)gatherNumActiveCPUs;
- (void)gatherHardwareModel;
- (void)gatherWorkQueueHardThreadLimit;
- (void)gatherWorkQueueSoftThreadLimit;
- (void)gatherMachineArchitecture;
- (void)gatherOsVersions;
- (void)gatherKernelVersion;
- (void)gatherKextStat;
- (void)sampleTrackedPidsNow;
- (void)addPidsWithNameToSampledPids:(id)arg1;
- (void)addPidToSampledPids:(int)arg1;
- (void)cacheSymbolInformationForAllSymbols;
- (void)addStackshot:(id)arg1;
- (void)_asynchronouslyCacheSymbolicatorForPid:(int)arg1;
- (id)newArrayOfSamplesForSampleIndexRangeStart:(unsigned long long)arg1 end:(unsigned long long)arg2;
- (id)newArrayOfSamplesForTimeRangeWithWallClockStartTime:(double)arg1 andEndTime:(double)arg2;
- (id)newArrayOfSamplesForTimeRangeWithMachStartTime:(double)arg1 andEndTime:(double)arg2;
- (void)dealloc;
@property(readonly) unsigned long long numSamples;
- (id)init;
- (id)timeInsensitiveTaskDataForStackshotTask:(id)arg1;
- (void)flushAllCachedSymbolInformation;
- (void)flushCachedSymbolicatorForTask:(id)arg1;
- (void)flushAllSymbolicators;
- (id)cachedSymbolHandleForAddress:(unsigned long long)arg1 inPid:(int)arg2;
- (id)symbolHandleForAddress:(unsigned long long)arg1 inLivingPid:(int)arg2;
- (id)symbolHandleForOffset:(unsigned long long)arg1 inBinaryWithUUID:(id)arg2 forPid:(int)arg3;
- (id)symbolHandleForOffset:(unsigned long long)arg1 inBinaryWithUUID:(id)arg2 inSampleTask:(id)arg3;
- (id)copyImageInfosForPid:(int)arg1;
- (id)symbolHandleForAddress:(unsigned long long)arg1 inSampleTask:(id)arg2;
- (void)gatherNonTimeCriticalDataFromLiveSystem;
- (void)doneSamplingLiveSystem;
- (void)gatherOccasionalLiveDataForMachTime:(double)arg1;
@property(readonly) NSString *targetProcessBundleName;
@property(readonly) NSString *targetProcessAbsolutePath;
@property(readonly) NSString *targetProcessName;
- (id)targetTask;
- (id)fanSpeedClosestToMachTime:(double)arg1;
@property BOOL shouldUseDsymForUUIDToFindBinaries;
@property BOOL shouldDiscoverUncachedInformation;
@property BOOL shouldReportSymbolInformation;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

