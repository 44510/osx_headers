//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class EKBackingStore, EKCalendar, NSObject<OS_dispatch_queue>, NSString;

@interface EKEventStore : NSObject
{
    BOOL _allowScheduling;
    BOOL _onlyNotifyForAccountedChanges;
    int backingStoreType;
    NSString *eventStoreIdentifier;
    EKBackingStore *backingStore;
    NSObject<OS_dispatch_queue> *backgroundFetchQueue;
}

+ (id)dateFromDateString:(id)arg1;
+ (id)dateStringFromDate:(id)arg1;
+ (BOOL)accessGrantedForSource:(id)arg1;
+ (BOOL)accessGrantedForCalendar:(id)arg1;
+ (BOOL)accessGrantedForEntityType:(unsigned long long)arg1;
+ (void)setDenyAccessToReminders:(BOOL)arg1;
+ (void)setDenyAccessToEvents:(BOOL)arg1;
+ (long long)authorizationStatusForEntityType:(unsigned long long)arg1;
@property BOOL onlyNotifyForAccountedChanges; // @synthesize onlyNotifyForAccountedChanges=_onlyNotifyForAccountedChanges;
@property BOOL allowScheduling; // @synthesize allowScheduling=_allowScheduling;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *backgroundFetchQueue; // @synthesize backgroundFetchQueue;
@property(readonly, nonatomic) int backingStoreType; // @synthesize backingStoreType;
@property(retain, nonatomic) EKBackingStore *backingStore; // @synthesize backingStore;
@property(readonly, nonatomic) NSString *eventStoreIdentifier; // @synthesize eventStoreIdentifier;
- (void).cxx_destruct;
- (id)_draftPathForEventWithOccurrenceID:(id)arg1 draftDirectory:(id)arg2;
- (void)_deleteDraft:(id)arg1;
- (void)_deleteDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2;
- (void)deleteDraftOfEventWithOccurrenceID:(id)arg1;
- (id)_loadDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2;
- (id)loadDraftOfEventWithOccurrenceID:(id)arg1;
- (BOOL)_saveDraftOfEvent:(id)arg1 toDirectory:(id)arg2;
- (BOOL)saveDraftOfEvent:(id)arg1;
- (id)_newBackingStoreForType:(int)arg1 includeEnabledDelegates:(BOOL)arg2 sourceFilters:(id)arg3 asyncWithCompletion:(CDUnknownBlockType)arg4;
- (id)_moveEventHelperRequireReinviteAttendees:(id)arg1 toCalendar:(id)arg2 requirements:(long long)arg3 error:(id *)arg4;
- (id)_moveEventHelperRequireDuplication:(id)arg1 toCalendar:(id)arg2 requirements:(long long)arg3;
- (id)_moveEventHelperRequireAlterationsToURL:(id)arg1 toCalendar:(id)arg2;
- (id)_moveEventHelperRequireAlterationsToTimeZone:(id)arg1 toCalendar:(id)arg2;
- (id)_moveEventHelperRequireAlterationsToScheduleAgent:(id)arg1 toCalendar:(id)arg2 requirements:(long long)arg3;
- (id)_moveEventHelperRequireAlterationsToRecurrence:(id)arg1 toCalendar:(id)arg2 modifiedStartDate:(char *)arg3 modifiedEndDate:(char *)arg4;
- (id)_moveEventHelperRequireAlterationsToPrivacy:(id)arg1 toCalendar:(id)arg2;
- (id)_moveEventHelperRequireAlterationsToAlarms:(id)arg1 toCalendar:(id)arg2;
- (id)_moveEventHelperRequireAlterations:(id)arg1 toCalendar:(id)arg2 modifiedStartDate:(char *)arg3 modifiedEndDate:(char *)arg4 requirements:(long long)arg5;
- (void)_setRangeOfInterest:(id)arg1 identifiersOfInterest:(id)arg2;
- (void)refreshObjectIDs:(id)arg1 inContext:(id)arg2;
- (void)resetCache;
- (id)predicateForEventsWithTitle:(id)arg1 location:(id)arg2 notes:(id)arg3 participantNames:(id)arg4 calendars:(id)arg5;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 calendarIdentifiers:(id)arg5 prefetchHint:(long long)arg6;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 prefetchHint:(long long)arg5;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendarIdentifiers:(id)arg3 prefetchHint:(long long)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)fetchEventsMatchingPredicate:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)eventsMatchingPredicate:(id)arg1;
- (id)moveEvent:(id)arg1 toCalendar:(id)arg2 requirements:(long long)arg3 error:(id *)arg4;
- (id)moveEvent:(id)arg1 toCalendar:(id)arg2 error:(id *)arg3;
- (id)_wrapAndValidateEventOccurrence:(id)arg1;
- (id)_wrapEventOccurrence:(id)arg1;
- (id)wrapEventOccurrences:(id)arg1;
- (id)eventsWithIdentifiers:(id)arg1;
- (id)eventWithIdentifier:(id)arg1;
- (id)eventsWithExternalIdentifier:(id)arg1;
- (BOOL)removeEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4;
- (BOOL)_saveEvents:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4 ignoreValidation:(BOOL)arg5;
- (BOOL)_saveEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4 ignoreValidation:(BOOL)arg5;
- (BOOL)saveEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4;
- (id)allEvents;
- (id)_predicateForNumberOfCompletedRemindersInCalendars:(id)arg1;
- (BOOL)anyCompletedRemindersInCalendars:(id)arg1;
- (unsigned long long)numberOfCompletedRemindersInCalendars:(id)arg1;
- (id)predicateForCompletedRemindersMaxResults:(unsigned long long)arg1 calendars:(id)arg2;
- (id)predicateForCompletedRemindersMaxResults:(unsigned long long)arg1;
- (id)predicateForAllIncompleteReminders;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(BOOL)arg3 completed:(BOOL)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned long long)arg9;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(BOOL)arg3 completed:(BOOL)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8;
- (id)predicateForRemindersWithSearchTerm:(id)arg1;
- (id)predicateForCompletedRemindersWithCalendars:(id)arg1;
- (id)predicateForRemindersWithTitle:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersWithDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2;
- (id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(BOOL)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(BOOL)arg4 completed:(BOOL)arg5 includeDatesBefore:(BOOL)arg6 sortOrder:(int)arg7;
- (id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForRemindersInCalendars:(id)arg1;
- (void)cancelFetchRequest:(id)arg1;
- (id)fetchRemindersMatchingPredicate:(id)arg1 completionCallback:(CDUnknownBlockType)arg2 batchCallback:(CDUnknownBlockType)arg3 cancelCallback:(CDUnknownBlockType)arg4;
- (id)fetchRemindersMatchingPredicate:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)remindersMatchingPredicate:(id)arg1;
- (id)calendarItemsMatchingPredicate:(id)arg1 entityClass:(id)arg2;
- (void)notifyChangedCalendarSource:(BOOL)arg1 changedCalendarSourceIdentifiers:(id)arg2 calendar:(BOOL)arg3 changedCalendarIdentifiers:(id)arg4 reminder:(BOOL)arg5 changedReminderIdentifiers:(id)arg6 event:(BOOL)arg7 changedEventIdentifiers:(id)arg8 otherChanges:(id)arg9;
- (id)remindersWithCalendarIdentifiers:(id)arg1;
- (id)_wrapReminderOccurrence:(id)arg1;
- (id)reminderWithIdentifier:(id)arg1;
- (id)remindersWithExternalIdentifier:(id)arg1;
- (BOOL)removeSource:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveSource:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)removeCalendar:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveCalendar:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)removeReminder:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveReminder:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (id)allReminders;
- (id)reminderWithExternalURI:(id)arg1;
- (id)eventWithExternalURI:(id)arg1;
- (id)calendarItemWithExternalURI:(id)arg1;
- (id)calendarWithExternalURI:(id)arg1;
- (void)showReminderInReminders:(id)arg1 withOpenOptions:(int)arg2;
- (void)showEventInCalendar:(id)arg1 withOpenOptions:(int)arg2 inView:(int)arg3;
- (void)showCalendarItemInApp:(id)arg1 withOpenOptions:(int)arg2 inView:(int)arg3;
- (void)showDateInCalendar:(id)arg1 inView:(int)arg2;
- (id)stringForViewOption:(int)arg1;
- (id)stringForOpenOption:(int)arg1;
- (id)recurrenceChangeManager;
- (id)calendarItemsWithExternalIdentifier:(id)arg1;
- (id)calendarItemWithIdentifier:(id)arg1;
- (id)sourcesEnabledForEntityType:(unsigned long long)arg1;
- (id)sourceErrors;
- (id)sourceWithIdentifier:(id)arg1;
- (id)sources;
- (id)localSource;
- (void)setDefaultCalendarForNewReminders:(id)arg1;
- (id)defaultCalendarForNewReminders;
- (void)setDefaultCalendarForNewEvents:(id)arg1;
@property(readonly, nonatomic) EKCalendar *defaultCalendarForNewEvents;
- (id)calendarWithIdentifier:(id)arg1;
- (id)calendarsForEntityType:(unsigned long long)arg1;
- (id)allCalendars;
- (void)_setEventStoreOnObject:(id)arg1;
- (void)_setEventStoreOnObjects:(id)arg1;
- (void)reset;
- (void)refreshSourcesIfNecessary;
- (BOOL)_conditionalSave:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3 withActionBlock:(CDUnknownBlockType)arg4;
- (BOOL)_conditionalSave:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3 withActionBlock:(CDUnknownBlockType)arg4 withValidateBlock:(CDUnknownBlockType)arg5;
- (BOOL)_savePreFlight:(id)arg1 withValidateBlock:(CDUnknownBlockType)arg2 error:(id *)arg3;
- (BOOL)_commit:(id *)arg1 onlyCommitObjects:(id)arg2;
- (BOOL)commitObjects:(id)arg1 error:(id *)arg2;
- (BOOL)commit:(id *)arg1;
- (id)sourceFilters;
- (BOOL)includeEnabledDelegates;
- (id)copyForBackgroundUpdate;
- (id)initWithEventStore:(id)arg1 andNewBackingStore:(id)arg2;
- (id)initWithStoreType:(int)arg1 includeEnabledDelegates:(BOOL)arg2 sourceFilters:(id)arg3 asyncWithCompletion:(CDUnknownBlockType)arg4 orWithExistingStore:(id)arg5 andBackingStore:(id)arg6;
- (id)initWithStoreType:(int)arg1 includeEnabledDelegates:(BOOL)arg2 sourceFilters:(id)arg3 asyncWithCompletion:(CDUnknownBlockType)arg4;
- (id)initWithStoreType:(int)arg1 includeEnabledDelegates:(BOOL)arg2;
- (id)initWithStoreType:(int)arg1 sourceFilters:(id)arg2;
- (id)initWithStoreType:(int)arg1;
- (id)initWithSourceFilters:(id)arg1;
- (id)initWithAccessToEntityTypes:(unsigned long long)arg1;
- (id)initAsyncWithCompletionBlock:(CDUnknownBlockType)arg1;
- (id)init;
- (void)_requestAccessForMask:(unsigned long long)arg1;
- (void)requestAccessToEntityType:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_noteAccessRequestedToEntityType:(unsigned long long)arg1;

@end

