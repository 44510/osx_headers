//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <EventKit/EKCalendarItem.h>

#import "CalDateRangeProtocol.h"
#import "EKProtocolMutableEventOccurrence.h"

@class EKParticipant, EKStructuredLocation, NSArray, NSCalendar, NSDate, NSDictionary, NSManagedObjectID, NSNumber, NSSet, NSString, NSTimeZone, NSURL;

@interface EKEvent : EKCalendarItem <EKProtocolMutableEventOccurrence, CalDateRangeProtocol>
{
    BOOL isPhantom;
    BOOL isYearlessBirthday;
    BOOL isYearlessLeapMonthBirthday;
    NSString *lunarCalendarString;
    unsigned long long participantsStatus;
    NSString *sliceParentID;
    NSString *birthdayTitle;
    NSString *nameForBirthday;
    NSDate *_cachedEndDate;
    NSDate *_cachedStartOfDayForStartDate;
    NSDate *_cachedStartOfDayForEndDate;
    NSNumber *_cachedIsMultiDayTimedEvent;
    NSNumber *_cachedDaysSpanned;
    NSCalendar *_cachedTimeValuesCalendar;
}

+ (id)_stringForEventStatus:(int)arg1;
+ (id)eventFromICSEvent:(id)arg1 inStore:(id)arg2;
+ (id)eventFromICSEvent:(id)arg1 withDocument:(id)arg2 inStore:(id)arg3;
+ (id)itemWithIdentifier:(id)arg1 inStore:(id)arg2;
+ (id)_eventWithOriginalOccurrence:(id)arg1 forRecurrenceDate:(id)arg2 createPartialBackingObject:(BOOL)arg3 eventStore:(id)arg4;
+ (id)_eventWithOriginalOccurrence:(id)arg1 forRecurrenceDate:(id)arg2 store:(id)arg3;
+ (id)_eventWithMasterEvent:(id)arg1 forRecurrenceDate:(id)arg2;
+ (int)_eventAvailabilityForParticipantStatus:(int)arg1;
+ (id)batchChangeNotificationName;
+ (id)knownSkipValidationKeys;
+ (id)knownSingleValueKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownImmutableKeys;
+ (id)knownApplyToMasterEventSingleValueKeys;
+ (unsigned long long)hashForObject:(id)arg1;
+ (Class)frozenClass;
+ (id)eventWithEventStore:(id)arg1;
@property(retain, nonatomic) NSCalendar *cachedTimeValuesCalendar; // @synthesize cachedTimeValuesCalendar=_cachedTimeValuesCalendar;
@property(retain, nonatomic) NSNumber *cachedDaysSpanned; // @synthesize cachedDaysSpanned=_cachedDaysSpanned;
@property(retain, nonatomic) NSNumber *cachedIsMultiDayTimedEvent; // @synthesize cachedIsMultiDayTimedEvent=_cachedIsMultiDayTimedEvent;
@property(retain, nonatomic) NSDate *cachedStartOfDayForEndDate; // @synthesize cachedStartOfDayForEndDate=_cachedStartOfDayForEndDate;
@property(retain, nonatomic) NSDate *cachedStartOfDayForStartDate; // @synthesize cachedStartOfDayForStartDate=_cachedStartOfDayForStartDate;
@property(retain, nonatomic) NSDate *cachedEndDate; // @synthesize cachedEndDate=_cachedEndDate;
@property(readonly, nonatomic) BOOL isYearlessLeapMonthBirthday; // @synthesize isYearlessLeapMonthBirthday;
@property(readonly, nonatomic) BOOL isYearlessBirthday; // @synthesize isYearlessBirthday;
@property(readonly, nonatomic) NSString *nameForBirthday; // @synthesize nameForBirthday;
- (void)setBirthdayTitle:(id)arg1;
@property(readonly, copy, nonatomic) NSString *birthdayTitle;
- (void)setSliceParentID:(id)arg1;
@property(readonly, copy, nonatomic) NSString *sliceParentID;
@property(readonly, nonatomic) unsigned long long participantsStatus; // @synthesize participantsStatus;
@property(nonatomic) BOOL isPhantom; // @synthesize isPhantom;
@property(readonly, nonatomic) NSString *lunarCalendarString; // @synthesize lunarCalendarString;
- (void).cxx_destruct;
- (BOOL)_needsAttendeePartStatReset;
- (BOOL)_validateTravelTimeEditable:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_validateResponseCommentEditable:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_validateAvailability:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_validateAllDayEditable:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_onlyAttendeeChangeWasToMyPartStat;
- (BOOL)_validateParticipationStatusEditable:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_validateCalendarEditable:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_validateAlarmsEditable:(id *)arg1 requiresFurtherValidation:(char *)arg2 keysAlreadyValidated:(id)arg3;
- (BOOL)_validateEditableHelperBasedOnChangesToKey:(id)arg1 checkBoolProperty:(id)arg2 propertyValue:(BOOL)arg3 error:(id *)arg4 errorCode:(int)arg5 requiresFurtherValidation:(char *)arg6 keysAlreadyValidated:(id)arg7;
- (BOOL)_validateEditableHelperBasedOnChangesToKey:(id)arg1 checkBoolPropertiesAndValues:(id)arg2 error:(id *)arg3 errorCode:(int)arg4 requiresFurtherValidation:(char *)arg5 keysAlreadyValidated:(id)arg6;
- (BOOL)_validateEditable:(id *)arg1;
- (BOOL)_validateRecurrence:(id *)arg1;
- (BOOL)_validateEntityTypeIsSupported:(id *)arg1;
- (BOOL)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 requirements:(long long)arg3;
- (BOOL)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperAllowedToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_canMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;
- (BOOL)_allowsAnyModificationsByAttendees;
- (void)_downloadAttachments;
- (BOOL)isOnlyOccurrence;
- (BOOL)isFirstOccurrence;
- (BOOL)isMainOccurrence;
- (BOOL)isSignificantlyDetachedIgnoringParticipation;
- (BOOL)isSignificantlyDetached;
- (BOOL)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (BOOL)_isDifferentFromCommittedEventHelperRequiresReschedule:(BOOL)arg1;
- (BOOL)isDifferentFromCommittedEventAndRequiresRSVP;
- (BOOL)isDifferentFromCommittedEventAndRequiresReschedule;
- (BOOL)isDifferentFromCommittedEvent;
- (BOOL)isDeletedDetached;
- (BOOL)isUnexcepted;
- (BOOL)isUndetached;
- (id)detachedEventOccurrences;
- (id)exceptionDates;
- (id)masterEventOccurrence;
- (void)makeRecurrenceEndDateBased;
- (void)makeRecurrenceEndCountBased;
- (long long)compareTimeEndingRecently:(id)arg1;
- (BOOL)hasFieldsIncompatibleWithMoveToCalendar:(id)arg1;
- (BOOL)durationOverlapsRecurrenceInterval;
- (BOOL)seriesHasOverlappingAlarms;
- (BOOL)seriesHasOverlappingEvents;
- (BOOL)alarmOverlapsWithEventInSeries;
- (BOOL)overlapsWithEventInSeries;
- (BOOL)_hasOrHadRecurrenceRule;
- (long long)daysSpannedInCalendar:(id)arg1;
- (BOOL)isMultiDayTimedEventInCalendar:(id)arg1;
- (id)startOfDayForEndDateInCalendar:(id)arg1;
- (id)startOfDayForStartDateInCalendar:(id)arg1;
- (void)clearCachedTimeValues;
- (void)checkAndSetCalendarForCaching:(id)arg1;
- (id)_detachedEventForDetachedOccurrence:(id)arg1 forRecurrenceDate:(id)arg2;
- (id)_newDetachedEventWithDetachedOccurrence:(id)arg1 forRecurrenceDate:(id)arg2;
- (void)_updateDatesForRecurrenceDate:(id)arg1;
- (void)createConflictsForDates:(id)arg1;
- (id)_existingOrNewOccurrenceForDate:(id)arg1;
- (id)conflictDetails;
- (id)_conflictDatesFromConflicts:(id)arg1;
- (id)dropBoxLocation;
- (BOOL)isValidRecurrenceDate:(id)arg1;
@property(readonly, nonatomic) NSDate *occurrenceDate;
- (id)eventOccurrenceID;
- (BOOL)refresh;
- (BOOL)_validateDatesWithError:(id *)arg1;
- (BOOL)validateWithSpan:(int)arg1 error:(id *)arg2;
- (BOOL)validate:(id *)arg1;
- (BOOL)canMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 error:(id *)arg3;
- (BOOL)canMoveAllowsRequirementsFromCalendar:(id)arg1 toCalendar:(id)arg2 error:(id *)arg3;
- (BOOL)canMoveAllowsRequirementsExceptDuplicationFromCalendar:(id)arg1 toCalendar:(id)arg2 error:(id *)arg3;
- (long long)requirementsToMoveToCalendar:(id)arg1;
- (long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (void)_removeNotificationBoxMessage:(id)arg1;
- (void)_removeAllNotificationBoxMessages;
- (BOOL)isEditable;
- (BOOL)_travelTimeModificationIsOK;
@property(readonly, nonatomic) BOOL allowsTravelTimeModifications;
- (BOOL)allowsResponseCommentModifications;
@property(readonly, nonatomic) BOOL allowsPrivateModifications;
@property(readonly, nonatomic) BOOL allowsParticipantStatusModifications;
@property(readonly, nonatomic) BOOL allowsAvailabilityModifications;
- (BOOL)allowsAttendeesModifications;
- (BOOL)allowsAttachmentModifications;
@property(readonly, nonatomic) BOOL allowsAllDayModifications;
@property(readonly, nonatomic) BOOL allowsAlarmModifications;
@property(retain, nonatomic) NSArray *locations;
- (void)setResponseComment:(id)arg1;
@property(readonly, copy, nonatomic) NSString *responseComment;
- (id)externalURI;
@property(readonly, nonatomic) NSString *eventIdentifier;
- (BOOL)removeWithSpan:(int)arg1 error:(id *)arg2;
- (BOOL)commitWithSpan:(int)arg1 error:(id *)arg2;
- (BOOL)isBirthday;
@property(readonly, nonatomic) NSString *birthdayPersonUniqueID;
- (long long)compareStartDateWithEvent:(id)arg1;
- (BOOL)isEvent;
@property(readonly, nonatomic) EKParticipant *organizer;
@property(nonatomic, getter=isAllDay) BOOL allDay;
- (id)defaultAlarms;
@property(copy, nonatomic) NSDate *endDate;
@property(copy, nonatomic) NSDate *startDate;
- (void)setTimeZoneObject:(id)arg1;
- (void)changeAttendeeStatusAndUpdateAvailability:(int)arg1;
@property(nonatomic) int availability;
- (void)setAvailabilityEnum:(int)arg1;
@property(readonly, nonatomic) int availabilityEnum;
- (id)masterEventWithApplyToMasterOnlyChanges;
- (BOOL)hasNonApplyToMasterEventChanges;
- (BOOL)hasApplyToMasterEventChanges;
- (void)setIsDetached:(BOOL)arg1;
@property(readonly, nonatomic) BOOL isDetached;
- (void)setEkStructuredStartLocation:(id)arg1;
@property(retain, nonatomic) EKStructuredLocation *travelStartLocation;
@property(readonly, copy, nonatomic) id <EKProtocolStructuredLocation> ekStructuredStartLocation;
- (void)setEkStructuredLocation:(id)arg1;
@property(retain, nonatomic) EKStructuredLocation *structuredLocation;
@property(readonly, copy, nonatomic) id <EKProtocolStructuredLocation> ekStructuredLocation;
@property(readonly, nonatomic) int status;
- (int)attendeesStatus;
- (void)setStatusString:(id)arg1;
@property(readonly, copy, nonatomic) NSString *statusString;
- (id)startDateIncludingTravel;
- (id)startDateIncludingTravelUnadjustedFromUTC;
- (void)setTravelDuration:(double)arg1;
@property(readonly, nonatomic) double travelDuration;
- (BOOL)intersectsRangeIfFloating:(id)arg1 normalRange:(id)arg2;
- (void)setDontSendNotificationForChanges:(BOOL)arg1;
@property(readonly, nonatomic) BOOL dontSendNotificationForChanges;
@property(copy, nonatomic) NSString *title;
@property(nonatomic) double travelTime;
- (void)setEndDateUnadjustedFromUTC:(id)arg1;
@property(readonly, copy, nonatomic) NSDate *endDateUnadjustedFromUTC;
- (BOOL)_isNonDetachedOccurrenceInSeries;
- (id)frozenObject;
- (id)copy;
- (id)duplicatePreserveCreationDate:(BOOL)arg1 stripRecurrenceData:(BOOL)arg2;
- (BOOL)_startDateIsOnSameDayAsOtherEventInSeries;
- (void)setPrivacyLevelString:(id)arg1;
- (void)setNotificationBoxMessageSet:(id)arg1;
@property(readonly, copy, nonatomic) NSString *privacyLevelString;
@property(readonly, nonatomic) NSSet *notificationBoxMessageSet;
@property(nonatomic) long long privacyLevel;
@property(readonly, nonatomic, getter=isPrivacySetInDelegateOrSharedToMeCalendar) BOOL privacySetInDelegateOrSharedToMeCalendar;
@property(readonly, nonatomic, getter=isPrivacySet) BOOL privacySet;
- (unsigned long long)entityType;
- (void)removeWithSpan:(int)arg1;
- (void)saveWithSpan:(int)arg1;

// Remaining properties
@property(copy, nonatomic) NSURL *URL;
@property(readonly, nonatomic) BOOL cachedHasAlarm;
@property(readonly, nonatomic) BOOL cachedHasAttachment;
@property(readonly, nonatomic) BOOL cachedHasAttendee;
@property(readonly, nonatomic) BOOL cachedIsCalendarOwnerInvitedAttendee;
@property(readonly, nonatomic) BOOL cachedIsCurrentUserInvitedAttendee;
@property(readonly, nonatomic) NSNumber *calendarItemPermissionNumber;
@property(readonly, nonatomic) BOOL canBeConvertedToFullObject;
@property(readonly, copy, nonatomic) id <EKProtocolCalendar> container;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic) BOOL defaultAlarmWasDeleted;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) BOOL isPartialObject;
@property(readonly, copy, nonatomic) NSDate *lastModifiedDate;
@property(copy, nonatomic) NSString *location;
@property(readonly, nonatomic) NSManagedObjectID *managedObjectID;
@property(copy, nonatomic) NSString *notes;
@property(readonly, nonatomic) BOOL organizedByMe;
@property(readonly, copy, nonatomic) NSString *organizerEmail;
@property(readonly, copy, nonatomic) NSString *organizerName;
@property(readonly, copy, nonatomic) NSURL *organizerURL;
@property(readonly, copy, nonatomic) id <EKProtocolParticipant> participantForMe;
@property(readonly, nonatomic) NSDictionary *preFrozenRelationshipObjects;
@property(copy, nonatomic) NSNumber *priorityNumber;
@property(readonly, retain, nonatomic) NSDate *recurrenceDateUnadjustedFromUTC;
@property(readonly, copy, nonatomic) NSString *recurrenceRuleString;
@property(readonly, copy, nonatomic) NSString *scheduleAgentString;
@property(readonly, copy, nonatomic) NSDate *startDateUnadjustedFromUTC;
@property(readonly) Class superclass;
@property(readonly, copy, nonatomic) NSTimeZone *timeZoneObject;

@end

