//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSCopying.h"
#import "NSSecureCoding.h"

@class NSArray, NSDictionary, NSHTTPCookieStorage, NSString, NSURL, NSURLCache, NSURLCredentialStorage;

@interface NSURLSessionConfiguration : NSObject <NSSecureCoding, NSCopying>
{
    BOOL _allowsCellularAccess;
    BOOL _discretionary;
    BOOL _sessionSendsLaunchEvents;
    BOOL _HTTPShouldUsePipelining;
    BOOL _HTTPShouldSetCookies;
    BOOL __requiresPowerPluggedIn;
    BOOL __allowsExpensiveAccess;
    BOOL __allowsPowerNapScheduling;
    BOOL __preventsIdleSleepOnceConnected;
    BOOL __sessionSendsLaunchOnDemandEvents;
    BOOL __collectsTimingData;
    BOOL __allowsRetryForBackgroundDataTasks;
    BOOL __respectsAllowsCellularAccessForDiscretionaryTasks;
    BOOL __infersDiscretionaryFromOriginatingClient;
    BOOL _backgroundSession;
    BOOL __phskip_credStorageSet;
    BOOL __phskip_urlCacheSet;
    BOOL __phskip_cookieStorageSet;
    BOOL __phskip_hstsStorageSet;
    BOOL _skip_download_unlink;
    BOOL __requiresClientToOpenFiles;
    BOOL __forcesNewConnections;
    BOOL __supportsAVAssetDownloads;
    BOOL __proxySession;
    BOOL __preventsIdleSleep;
    BOOL __usePipeliningHeuristics;
    int _TLSMinimumSupportedProtocol;
    int _TLSMaximumSupportedProtocol;
    NSString *_identifier;
    unsigned long long _requestCachePolicy;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
    unsigned long long _networkServiceType;
    NSString *_sharedContainerIdentifier;
    NSDictionary *_connectionProxyDictionary;
    unsigned long long _HTTPCookieAcceptPolicy;
    NSDictionary *_HTTPAdditionalHeaders;
    long long _HTTPMaximumConnectionsPerHost;
    NSArray *_protocolClasses;
    NSURL *__directoryForDownloadedFiles;
    NSString *__sourceApplicationBundleIdentifier;
    NSString *__sourceApplicationSecondaryIdentifier;
    unsigned long long __TCPAdaptiveReadTimeout;
    unsigned long long __TCPAdaptiveWriteTimeout;
    NSString *__ledBellyServiceIdentifier;
    double __connectionCachePurgeTimeout;
    double __connectionCacheCellPurgeTimeout;
    NSString *__connectionPoolName;
    NSString *_disposition;
    NSURLCredentialStorage *__phskip_credStorage;
    NSURLCache *__phskip_urlCache;
    NSHTTPCookieStorage *__phskip_cookieStorage;
    struct _CFHSTSPolicy *__phskip_hstsStorage;
    long long _pipeliningHighWatermark;
    long long _pipeliningLowWatermark;
    long long _numPriorityLevels;
    long long _numFastLanes;
    long long _minimumFastLanePriority;
    NSString *__tcpConnectionPoolName;
    NSDictionary *__socketStreamProperties;
    NSArray *__contentDispHeadEncFallback;
}

+ (BOOL)supportsSecureCoding;
+ (id)backgroundSessionConfiguration:(id)arg1;
+ (id)backgroundSessionConfigurationWithIdentifier:(id)arg1;
+ (id)ephemeralSessionConfiguration;
+ (id)sessionConfigurationForSharedSession;
+ (id)defaultSessionConfiguration;
+ (id)_defaultProtocolClasses;
@property(copy) NSArray *_contentDispHeadEncFallback; // @synthesize _contentDispHeadEncFallback=__contentDispHeadEncFallback;
@property BOOL _usePipeliningHeuristics; // @synthesize _usePipeliningHeuristics=__usePipeliningHeuristics;
@property BOOL _preventsIdleSleep; // @synthesize _preventsIdleSleep=__preventsIdleSleep;
@property(getter=_isProxySession) BOOL _proxySession; // @synthesize _proxySession=__proxySession;
@property BOOL _supportsAVAssetDownloads; // @synthesize _supportsAVAssetDownloads=__supportsAVAssetDownloads;
@property(copy) NSDictionary *_socketStreamProperties; // @synthesize _socketStreamProperties=__socketStreamProperties;
@property BOOL _forcesNewConnections; // @synthesize _forcesNewConnections=__forcesNewConnections;
@property(copy) NSString *_tcpConnectionPoolName; // @synthesize _tcpConnectionPoolName=__tcpConnectionPoolName;
@property BOOL _requiresClientToOpenFiles; // @synthesize _requiresClientToOpenFiles=__requiresClientToOpenFiles;
@property BOOL skip_download_unlink; // @synthesize skip_download_unlink=_skip_download_unlink;
@property long long minimumFastLanePriority; // @synthesize minimumFastLanePriority=_minimumFastLanePriority;
@property long long numFastLanes; // @synthesize numFastLanes=_numFastLanes;
@property long long numPriorityLevels; // @synthesize numPriorityLevels=_numPriorityLevels;
@property long long pipeliningLowWatermark; // @synthesize pipeliningLowWatermark=_pipeliningLowWatermark;
@property long long pipeliningHighWatermark; // @synthesize pipeliningHighWatermark=_pipeliningHighWatermark;
@property BOOL _phskip_hstsStorageSet; // @synthesize _phskip_hstsStorageSet=__phskip_hstsStorageSet;
@property(retain) struct _CFHSTSPolicy *_phskip_hstsStorage; // @synthesize _phskip_hstsStorage=__phskip_hstsStorage;
@property BOOL _phskip_cookieStorageSet; // @synthesize _phskip_cookieStorageSet=__phskip_cookieStorageSet;
@property(retain) NSHTTPCookieStorage *_phskip_cookieStorage; // @synthesize _phskip_cookieStorage=__phskip_cookieStorage;
@property BOOL _phskip_urlCacheSet; // @synthesize _phskip_urlCacheSet=__phskip_urlCacheSet;
@property(retain) NSURLCache *_phskip_urlCache; // @synthesize _phskip_urlCache=__phskip_urlCache;
@property BOOL _phskip_credStorageSet; // @synthesize _phskip_credStorageSet=__phskip_credStorageSet;
@property(retain) NSURLCredentialStorage *_phskip_credStorage; // @synthesize _phskip_credStorage=__phskip_credStorage;
@property NSString *disposition; // @synthesize disposition=_disposition;
@property(getter=isBackgroundSession) BOOL backgroundSession; // @synthesize backgroundSession=_backgroundSession;
@property(copy) NSString *_connectionPoolName; // @synthesize _connectionPoolName=__connectionPoolName;
@property BOOL _infersDiscretionaryFromOriginatingClient; // @synthesize _infersDiscretionaryFromOriginatingClient=__infersDiscretionaryFromOriginatingClient;
@property BOOL _respectsAllowsCellularAccessForDiscretionaryTasks; // @synthesize _respectsAllowsCellularAccessForDiscretionaryTasks=__respectsAllowsCellularAccessForDiscretionaryTasks;
@property BOOL _allowsRetryForBackgroundDataTasks; // @synthesize _allowsRetryForBackgroundDataTasks=__allowsRetryForBackgroundDataTasks;
@property double _connectionCacheCellPurgeTimeout; // @synthesize _connectionCacheCellPurgeTimeout=__connectionCacheCellPurgeTimeout;
@property double _connectionCachePurgeTimeout; // @synthesize _connectionCachePurgeTimeout=__connectionCachePurgeTimeout;
@property(copy) NSString *_ledBellyServiceIdentifier; // @synthesize _ledBellyServiceIdentifier=__ledBellyServiceIdentifier;
@property BOOL _collectsTimingData; // @synthesize _collectsTimingData=__collectsTimingData;
@property BOOL _sessionSendsLaunchOnDemandEvents; // @synthesize _sessionSendsLaunchOnDemandEvents=__sessionSendsLaunchOnDemandEvents;
@property BOOL _preventsIdleSleepOnceConnected; // @synthesize _preventsIdleSleepOnceConnected=__preventsIdleSleepOnceConnected;
@property BOOL _allowsPowerNapScheduling; // @synthesize _allowsPowerNapScheduling=__allowsPowerNapScheduling;
@property BOOL _allowsExpensiveAccess; // @synthesize _allowsExpensiveAccess=__allowsExpensiveAccess;
@property unsigned long long _TCPAdaptiveWriteTimeout; // @synthesize _TCPAdaptiveWriteTimeout=__TCPAdaptiveWriteTimeout;
@property unsigned long long _TCPAdaptiveReadTimeout; // @synthesize _TCPAdaptiveReadTimeout=__TCPAdaptiveReadTimeout;
@property(copy) NSString *_sourceApplicationSecondaryIdentifier; // @synthesize _sourceApplicationSecondaryIdentifier=__sourceApplicationSecondaryIdentifier;
@property(copy) NSString *_sourceApplicationBundleIdentifier; // @synthesize _sourceApplicationBundleIdentifier=__sourceApplicationBundleIdentifier;
@property(copy) NSURL *_directoryForDownloadedFiles; // @synthesize _directoryForDownloadedFiles=__directoryForDownloadedFiles;
@property BOOL _requiresPowerPluggedIn; // @synthesize _requiresPowerPluggedIn=__requiresPowerPluggedIn;
@property(copy) NSArray *protocolClasses; // @synthesize protocolClasses=_protocolClasses;
@property long long HTTPMaximumConnectionsPerHost; // @synthesize HTTPMaximumConnectionsPerHost=_HTTPMaximumConnectionsPerHost;
@property(copy) NSDictionary *HTTPAdditionalHeaders; // @synthesize HTTPAdditionalHeaders=_HTTPAdditionalHeaders;
@property unsigned long long HTTPCookieAcceptPolicy; // @synthesize HTTPCookieAcceptPolicy=_HTTPCookieAcceptPolicy;
@property BOOL HTTPShouldSetCookies; // @synthesize HTTPShouldSetCookies=_HTTPShouldSetCookies;
@property BOOL HTTPShouldUsePipelining; // @synthesize HTTPShouldUsePipelining=_HTTPShouldUsePipelining;
@property int TLSMaximumSupportedProtocol; // @synthesize TLSMaximumSupportedProtocol=_TLSMaximumSupportedProtocol;
@property int TLSMinimumSupportedProtocol; // @synthesize TLSMinimumSupportedProtocol=_TLSMinimumSupportedProtocol;
@property(copy) NSDictionary *connectionProxyDictionary; // @synthesize connectionProxyDictionary=_connectionProxyDictionary;
@property BOOL sessionSendsLaunchEvents; // @synthesize sessionSendsLaunchEvents=_sessionSendsLaunchEvents;
@property(copy) NSString *sharedContainerIdentifier; // @synthesize sharedContainerIdentifier=_sharedContainerIdentifier;
@property(getter=isDiscretionary) BOOL discretionary; // @synthesize discretionary=_discretionary;
@property BOOL allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property unsigned long long networkServiceType; // @synthesize networkServiceType=_networkServiceType;
@property double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property double timeoutIntervalForRequest; // @synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest;
@property unsigned long long requestCachePolicy; // @synthesize requestCachePolicy=_requestCachePolicy;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
- (id)sourceApplicationBundleIdentifier;
- (void)setSourceApplicationBundleIdentifier:(id)arg1;
- (struct HTTPConnectionCacheLimits)getConnectionCacheLimits;
- (void *)_copyAttribute:(struct __CFString *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(retain) NSURLCredentialStorage *URLCredentialStorage;
- (struct OpaqueCFHTTPCookieStorage *)_copyCFCookieStorage;
@property(retain) NSURLCache *URLCache;
@property(retain) NSHTTPCookieStorage *HTTPCookieStorage;
- (void)setHSTSPolicy:(struct _CFHSTSPolicy *)arg1;
- (struct _CFHSTSPolicy *)copyHSTSPolicy;
- (id)initWithDisposition:(id)arg1;

@end

