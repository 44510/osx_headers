//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSView.h"

#import "GEOResourceManifestTileGroupObserver.h"
#import "MKAnnotationContainerViewDelegate.h"
#import "MKAnnotationManagerDelegate.h"
#import "MKAnnotationMarkerContainer.h"
#import "MKCompassViewDelegate.h"
#import "MKLocationManagerObserver.h"
#import "MKOverlayContainerViewDelegate.h"
#import "MKScaleViewDelegate.h"
#import "NSCoding.h"
#import "VKMapViewDelegate.h"
#import "VKPuckAnimatorDelegate.h"

@class MKAccessibilityItem, MKAnnotationContainerView, MKAnnotationManager, MKCompassView, MKLabelMarker, MKMapCamera, MKOverlayContainerView, MKScaleView, MKUserLocation, NSArray, NSObject<OS_dispatch_source>, NSOrderedSet, NSSegmentedControl, NSString, NSTimer, VKMapView, VKPuckAnimator, _MKEnvironmentLabel;

@interface MKMapView : NSView <GEOResourceManifestTileGroupObserver, MKScaleViewDelegate, VKMapViewDelegate, VKPuckAnimatorDelegate, MKLocationManagerObserver, MKAnnotationMarkerContainer, MKAnnotationManagerDelegate, MKAnnotationContainerViewDelegate, MKOverlayContainerViewDelegate, MKCompassViewDelegate, NSCoding>
{
    VKMapView *_mapLayer;
    double _rotationInGesture;
    double _lastRotationInGestureDelta;
    double _lastRotationInGestureTimestamp;
    double _pinchFactorInGesture;
    double _pinchFactorAverageInGestureTimestamp;
    double _pinchFactorAverageInGesture;
    struct CGPoint _lastDragPanTranslation;
    struct CGPoint _lastDragPanDelta;
    double _lastDragPanTranslationTimestamp;
    struct CGPoint _pointInMapWhenStartingGesture;
    struct CGPoint _pointInMapOnMouseDown;
    struct CGPoint _scrollTranslation;
    double _pitchInDragging;
    BOOL _userIsDragging;
    BOOL _userIsGesturing;
    BOOL _userIsZooming;
    BOOL _userIsRotating;
    BOOL _userIsPanning;
    BOOL _userIsPitching;
    BOOL _userStartedLongPressAction;
    BOOL _userIsDraggingAnnotation;
    BOOL _userIsZoomingWithArrows;
    BOOL _userIsRotatingWithArrows;
    double _startZoomingTimeStamp;
    double _startRotatingTimeStamp;
    BOOL _userStartedDraggingAnnotation;
    BOOL _userCanceledDraggingAnnotation;
    BOOL _userDraggedMouseSinceMouseDown;
    BOOL _userGesturedSinceMouseDown;
    BOOL _mouseIsDown;
    BOOL _usedAnnotationOnMouseDown;
    BOOL _cursorInView;
    BOOL _altKeyPressedOnMouseDown;
    BOOL _shiftKeyPressedOnMouseDown;
    struct CGPoint _cursorPositionOnMouseDown;
    struct CGPoint _cursorPositionOnMouseDownRelativeToMapView;
    BOOL _shouldHideCursor;
    long long _arrowsMask;
    struct CGPoint _translationDirection;
    double _arrowNavigationStartTimestamp;
    BOOL _showsUserLocation;
    MKUserLocation *_userLocation;
    VKPuckAnimator *_userLocationAnimator;
    MKAnnotationManager *_annotationManager;
    CDUnknownBlockType _annotationRectTest;
    CDUnknownBlockType _annotationCoordinateTest;
    MKAnnotationContainerView *_annotationContainer;
    MKOverlayContainerView *_overlayContainer;
    id <MKMapViewDelegate> _safeDelegate;
    id <MKMapViewDelegate> _unsafeDelegate;
    unsigned long long _mapType;
    BOOL _zoomEnabled;
    BOOL _scrollEnabled;
    BOOL _rotateEnabled;
    BOOL _pitchEnabled;
    BOOL _isMapRasterized;
    BOOL _showsCompass;
    BOOL _showsZoomControls;
    long long _overlaysWritingDirection;
    int _attributionCorner;
    BOOL _isAnimating;
    BOOL _isInitializing;
    CDStruct_02837cd9 _previousVisibleMapRect;
    long long _remainingAttemptToLocateUser;
    NSView *_attributionView;
    CDStruct_2c43369c _smartAimingCachedCoordinate;
    NSObject<OS_dispatch_source> *_animationTimer;
    CDUnknownBlockType _endAnimationBlock;
    NSOrderedSet *_storedAccessibilityItems;
    BOOL _willUpdateAccessibilityItems;
    BOOL _wantsAccessibilityUpdates;
    MKAccessibilityItem *_focusedAccessibilityItem;
    MKLabelMarker *_selectedLabelMarker;
    long long _notifyMapRegionUpdateCounter;
    MKMapCamera *_camera;
    NSSegmentedControl *_zoomButtons;
    NSTimer *_compassHideTimer;
    BOOL _showsAttribution;
    BOOL _showsAttributionBadge;
    BOOL _showsAboutMapInContextualMenu;
    BOOL _showsScale;
    CDUnknownBlockType _selectAnnotationViewAfterRedrawBlock;
    BOOL _hasPendingCameraChange;
    double _mapModeStartTime;
    BOOL _continueToRenderWhenOccluded;
    unsigned long long _suspendedEffectsCount;
    CDUnknownBlockType _regionSetterWhenSized;
    double _verticalYawOverride;
    BOOL _userRotatedAwayFromVerticalYaw;
    BOOL _showsCurrentEnvironmentName;
    _MKEnvironmentLabel *_debugCurrentEnvironmentLabel;
    BOOL _edgeInsetsAreExplicit;
    BOOL _observingContentLayoutRect;
    BOOL _canSelectAllLabels;
    BOOL willUpdateAccessibilityItems;
    BOOL wantsAccessibilityUpdates;
    MKCompassView *_compass;
    MKScaleView *_scaleView;
    NSView *_settingsView;
    MKAccessibilityItem *focusedAccessibilityItem;
    unsigned long long _currentFlyoverAnimationID;
}

+ (CDStruct_90e2a262)mapRectWithCenterCoordinate:(CDStruct_c3b9c2ee)arg1 zoomScale:(double)arg2 size:(struct CGSize)arg3;
+ (CDStruct_90e2a262)regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize)arg2 edgeInsets:(CDStruct_3c058996)arg3 region:(CDStruct_90e2a262)arg4;
+ (unsigned long long)minZoomLevelForMapType:(unsigned long long)arg1 viewSize:(struct CGSize)arg2;
+ (CDStruct_90e2a262)_mapRectThatFitsViewBounds:(struct CGRect)arg1 mapRect:(CDStruct_90e2a262)arg2 viewInsets:(CDStruct_3c058996)arg3 edgePadding:(CDStruct_3c058996)arg4 minZoomLevel:(double)arg5 maxZoomLevel:(double)arg6 snapToZoomLevel:(BOOL)arg7;
+ (CDStruct_90e2a262)_regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize)arg2 viewInsets:(CDStruct_3c058996)arg3 edgePadding:(CDStruct_3c058996)arg4 region:(CDStruct_90e2a262)arg5 minZoomLevel:(double)arg6 maxZoomLevel:(double)arg7 snapToZoomLevel:(BOOL)arg8;
@property(nonatomic, getter=_currentFlyoverAnimationID, setter=_setCurrentFlyoverAnimationID:) unsigned long long currentFlyoverAnimationID; // @synthesize currentFlyoverAnimationID=_currentFlyoverAnimationID;
@property(retain, nonatomic) MKAccessibilityItem *focusedAccessibilityItem; // @synthesize focusedAccessibilityItem;
@property BOOL wantsAccessibilityUpdates; // @synthesize wantsAccessibilityUpdates;
@property BOOL willUpdateAccessibilityItems; // @synthesize willUpdateAccessibilityItems;
@property(retain) MKScaleView *scaleView; // @synthesize scaleView=_scaleView;
@property(nonatomic) BOOL continueToRenderWhenOccluded; // @synthesize continueToRenderWhenOccluded=_continueToRenderWhenOccluded;
@property(nonatomic) int attributionCorner; // @synthesize attributionCorner=_attributionCorner;
@property(nonatomic) long long overlaysWritingDirection; // @synthesize overlaysWritingDirection=_overlaysWritingDirection;
@property(nonatomic) BOOL showsZoomControls; // @synthesize showsZoomControls=_showsZoomControls;
@property(nonatomic) BOOL showsCompass; // @synthesize showsCompass=_showsCompass;
@property(nonatomic) BOOL showsAboutMapInContextualMenu; // @synthesize showsAboutMapInContextualMenu=_showsAboutMapInContextualMenu;
@property(nonatomic) BOOL showsAttributionBadge; // @synthesize showsAttributionBadge=_showsAttributionBadge;
@property(nonatomic) BOOL showsAttribution; // @synthesize showsAttribution=_showsAttribution;
@property(retain, nonatomic) NSSegmentedControl *zoomButtons; // @synthesize zoomButtons=_zoomButtons;
@property(retain, nonatomic) MKCompassView *compass; // @synthesize compass=_compass;
@property(nonatomic) BOOL animating; // @synthesize animating=_isAnimating;
@property(nonatomic) BOOL canSelectAllLabels; // @synthesize canSelectAllLabels=_canSelectAllLabels;
@property(retain) NSOrderedSet *storedAccessibilityItems; // @synthesize storedAccessibilityItems=_storedAccessibilityItems;
@property(nonatomic, getter=isRotateEnabled) BOOL rotateEnabled; // @synthesize rotateEnabled=_rotateEnabled;
@property(nonatomic, getter=isScrollEnabled) BOOL scrollEnabled; // @synthesize scrollEnabled=_scrollEnabled;
@property(nonatomic, getter=isZoomEnabled) BOOL zoomEnabled; // @synthesize zoomEnabled=_zoomEnabled;
- (void).cxx_destruct;
@property(readonly, nonatomic) BOOL effectsEnabled;
- (void)_updateShouldDisplayEffects;
- (void)startEffects;
- (void)stopEffects;
- (void)applicationDidResignActiveOrWillTerminate:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)setCamera:(id)arg1 animated:(BOOL)arg2;
@property(copy, nonatomic) MKMapCamera *camera;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (BOOL)layer:(id)arg1 shouldInheritContentsScale:(double)arg2 fromWindow:(id)arg3;
- (void)_updateScaleVisibility;
@property(nonatomic) BOOL showsScale;
- (BOOL)drawsBlackOnWhiteScale;
- (void)setZoomLevel:(double)arg1 animated:(BOOL)arg2;
- (double)currentZoomLevel;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (void)scaleView:(id)arg1 didFinishDraggingWithEvent:(id)arg2;
- (void)scaleView:(id)arg1 didDragWithEvent:(id)arg2;
- (void)compassViewClicked:(id)arg1;
- (void)compassView:(id)arg1 didFinishDraggingWithEvent:(id)arg2;
- (void)compassView:(id)arg1 didDragWithEvent:(id)arg2 fromInnerClick:(BOOL)arg3;
- (void)compassView:(id)arg1 didDragWithEvent:(id)arg2;
- (double)annotationContainer:(id)arg1 pinDropDistanceForCoordinate:(CDStruct_c3b9c2ee)arg2 maxDistance:(double *)arg3 startPoint:(struct CGPoint *)arg4 shadowStartPoint:(struct CGPoint *)arg5;
- (void)annotationContainerDidDropPins:(id)arg1;
- (void)annotationContainerWillDropPins:(id)arg1;
- (void)annotationContainerDidAnimateBubble:(id)arg1;
- (void)annotationContainerWillAnimateBubble:(id)arg1;
- (BOOL)annotationContainerEffectsEnabled:(id)arg1;
- (struct CGRect)annotationContainerVisibleRect:(id)arg1;
- (struct CGRect)visibleCenteringRectInView:(id)arg1;
- (struct CGRect)visibleRectInView:(id)arg1;
- (double)_zoomScale;
- (void)annotationContainer:(id)arg1 scrollToRevealCalloutWithOffset:(struct CGPoint)arg2 annotationCoordinate:(CDStruct_c3b9c2ee)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)annotationContainerIsRotated:(id)arg1;
- (BOOL)annotationContainerShouldAlignToPixels:(id)arg1;
- (BOOL)isRegionChanging;
- (BOOL)isZooming;
- (void)_annotationViewDragStateChanged:(id)arg1;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2;
- (id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (void)moveAnnotationRepresentation:(id)arg1 fromCoordinate:(CDStruct_c3b9c2ee)arg2 animated:(BOOL)arg3 duration:(double)arg4;
- (void)deselectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2;
- (void)selectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect)arg3;
- (void)removeAnnotationRepresentation:(id)arg1;
- (void)addAnnotationRepresentation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)mapView:(id)arg1 didAnimateInAnnotationMarkers:(id)arg2;
- (id)mapLayer:(id)arg1 painterForOverlay:(id)arg2;
- (void)mapLayer:(id)arg1 didFinishChangingMapDisplayStyle:(unsigned long long)arg2;
- (void)mapLayer:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)mapLayerDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(BOOL)arg2;
- (void)mapLayerDidBecomePartiallyDrawn:(id)arg1;
- (void)mapLayer:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)mapLayer:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)notifyMapRegionDidChangeAnimated:(BOOL)arg1;
- (void)notifyMapRegionWillChangeAnimated:(BOOL)arg1;
- (void)mapLayerDidDraw:(id)arg1;
- (void)mapLayerDidChangeVisibleRegion:(id)arg1;
- (void)mapLayerDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapLayerDidFinishLoadingTiles:(id)arg1;
- (void)mapLayerDidStartLoadingTiles:(id)arg1;
- (void)_notifyDelegateUsingSelector:(SEL)arg1;
- (void)_notifyDelegateUsingSelector:(SEL)arg1 withObject:(id)arg2;
- (BOOL)isShowingNoDataPlaceholders;
- (id)overlays;
- (id)rendererForOverlay:(id)arg1;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeOverlays:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)addOverlay:(id)arg1 level:(long long)arg2;
- (id)overlaysInLevel:(long long)arg1;
- (void)addOverlays:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (id)createDrawableForOverlay:(id)arg1;
- (id)overlayContainer;
- (void)mapLayer:(id)arg1 flyoverTourLabelDidChange:(id)arg2;
- (void)mapLayer:(id)arg1 didStopFlyoverTourCompleted:(BOOL)arg2;
- (void)mapLayerWillStartFlyoverTour:(id)arg1;
- (void)mapLayer:(id)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)mapLayer:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapView:(id)arg1 willSelectLabelMarker:(id)arg2;
- (void)deselectLabelMarkerAnimated:(BOOL)arg1;
- (id)selectedLabelMarker;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect)arg3;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(CDStruct_39925896)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(CDStruct_39925896)arg2 course:(double)arg3;
- (void)puckAnimator:(id)arg1 runAnimation:(id)arg2;
- (struct CGPoint)translationFromArrowMask:(long long)arg1;
- (double)translationSpeedForArrowNavigationWithTimestamp:(double)arg1;
- (void)handleNewArrowMask:(long long)arg1 oldMask:(long long)arg2;
- (void)handleArrowEvent:(id)arg1 keyDown:(BOOL)arg2;
- (void)keyUp:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)_contextualMenuAboutMaps;
- (void)rotationDidEnd;
- (id)menuForEvent:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)disableAndRearmEnableMarkerPixelAlignment;
- (void)disableMarkerPixelAlignment;
- (void)enableMarkerPixelAlignment;
- (void)userDidStopRotating;
- (void)userWillStartRotating;
- (void)userDidStopPitching;
- (void)userWillStartPitching;
- (void)userDidStopZooming;
- (void)userWillStartZooming;
- (void)userDidStopPanning;
- (void)userWillStartPanning;
- (void)userDidStopUserInteraction;
- (void)userWillStartUserInteraction;
- (BOOL)userIsGesturing;
- (void)smartMagnifyWithEvent:(id)arg1;
- (BOOL)userPausedRotating;
- (BOOL)userPausedPanning;
- (BOOL)userPausedPinching;
- (void)magnifyWithEvent:(id)arg1;
- (void)pitchByDragging:(double)arg1 focusPoint:(struct CGPoint)arg2;
- (void)rotateByDragging:(double)arg1 focusPoint:(struct CGPoint)arg2;
- (void)rotateWithEvent:(id)arg1;
- (void)endGestureWithEvent:(id)arg1;
- (void)beginGestureWithEvent:(id)arg1;
- (void)cancelHighlights;
- (void)otherMouseUp:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)_commonMouseUp:(id)arg1 otherButton:(BOOL)arg2;
- (void)cancelOperation:(id)arg1;
- (void)handleSimpleClickInMapView;
- (void)handleSimpleClickInMapViewAtCoordinate:(CDStruct_c3b9c2ee)arg1;
- (void)updateZoomWithDragDelta:(double)arg1 focusPoint:(struct CGPoint)arg2;
- (void)updateYawWithDragEvent:(id)arg1 focusPoint:(struct CGPoint)arg2;
- (void)updateYawAndPitchWithDragEvent:(id)arg1 focusPoint:(struct CGPoint)arg2;
- (void)otherMouseDragged:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)_commonMouseDragged:(id)arg1 otherButton:(BOOL)arg2;
- (void)_scrollMapWithMouseEvent:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (id)annotationForSelectionAtPoint:(struct CGPoint)arg1 avoidCurrent:(BOOL)arg2;
- (struct CGPoint)pointInMapOnMouseDown;
- (void)_checkIfMouseStillDownAfterLongDelayAndNotify;
- (void)_checkIfMouseStillDownAfterShortDelayAndNotify;
- (BOOL)_annotationTipIsInsideViewForMousePosition:(struct CGPoint)arg1;
- (void)_dragAnnotationWithEvent:(id)arg1;
- (struct CGPoint)adjustedPositionDuringDrag:(struct CGPoint)arg1;
- (void)_stopDraggingAnnotationAtPoint:(struct CGPoint)arg1 cancel:(BOOL)arg2;
- (void)_moveCursorNearPointInView:(struct CGPoint)arg1;
- (void)cursorUpdate:(id)arg1;
- (BOOL)_tryDraggingAnnotationAt:(struct CGPoint)arg1;
- (void)otherMouseDown:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)_commonMouseDown:(id)arg1 otherButton:(BOOL)arg2;
- (BOOL)controlKeyPressed;
- (BOOL)commandKeyPressed;
- (BOOL)shiftKeyPressed;
- (BOOL)altKeyPressed;
- (struct CGPoint)centerPointInMapView;
- (struct CGPoint)zoomPointInMapViewFromPoint:(struct CGPoint)arg1 smartAiming:(BOOL)arg2 lockOnPreviousTarget:(BOOL)arg3;
- (struct CGPoint)zoomPointInMapViewFromEvent:(id)arg1 smartAiming:(BOOL)arg2 lockOnPreviousTarget:(BOOL)arg3;
- (struct CGPoint)pointInMapViewFromEvent:(id)arg1;
- (BOOL)userCanScroll;
- (BOOL)userCanZoom;
- (BOOL)userCanRotate;
- (BOOL)userCanTilt;
@property(readonly, nonatomic) BOOL allowsRotation;
@property(readonly, nonatomic) BOOL allowsTilt;
- (BOOL)isMapRasterized;
- (void)checkIfMapIsRasterized;
- (void)showCalloutForCurrentAnnotationIfNeeded;
- (void)deselectAllMarkersAndAnnotationViews;
- (void)setMarkersEnabled:(BOOL)arg1;
- (BOOL)markersEnabled;
- (void)showAnnotations:(id)arg1 animated:(BOOL)arg2;
@property(copy, nonatomic) NSArray *selectedAnnotations;
- (void)deselectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)selectAnnotation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect)arg3;
- (void)selectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (id)viewForAnnotation:(id)arg1;
- (id)annotationsInMapRect:(CDStruct_90e2a262)arg1;
@property(readonly, nonatomic) struct CGRect annotationVisibleRect;
@property(readonly, nonatomic) NSArray *annotations;
- (void)replaceAnnotation:(id)arg1 withAnnotation:(id)arg2;
- (void)removeAnnotations:(id)arg1;
- (void)removeAnnotation:(id)arg1;
- (void)_addAnnotations:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)_addAnnotation:(id)arg1 allowAnimation:(BOOL)arg2;
- (id)annotationManager;
- (void)addAnnotations:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (void)_locationManagerApprovalDidChange:(id)arg1;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (BOOL)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)_hideUserLocation;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (id)calloutView;
- (BOOL)isCalloutVisible;
- (BOOL)isCalloutLeftAnchored;
- (id)userLocationView;
@property(readonly, nonatomic, getter=isUserLocationVisible) BOOL userLocationVisible;
@property(readonly, nonatomic) MKUserLocation *userLocation;
- (BOOL)hasUserLocation;
@property(nonatomic) BOOL showsUserLocation;
- (void)_stopUpdatingUserLocation;
- (void)_startUpdatingUserLocation;
- (void)presentRegion:(CDStruct_90e2a262)arg1;
- (void)_resumeFlyoverAnimation;
- (void)_pauseFlyoverAnimation;
- (void)_stopFlyoverAnimation;
- (void)_startFlyoverTourAnimation:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_performFlyoverAnimation:(id)arg1 animateToStart:(BOOL)arg2;
- (void)_performFlyoverAnimation:(id)arg1;
- (void)_prepareFlyoverAnimation:(id)arg1 inBackground:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (id)seamlessOpeningURLForMapItems:(id)arg1 launchOptions:(id)arg2;
- (struct CGRect)convertMapRect:(CDStruct_90e2a262)arg1 toRectToView:(id)arg2;
- (CDStruct_90e2a262)convertRect:(struct CGRect)arg1 toMapRectFromView:(id)arg2;
- (void)displayDefaultMapRegionWithCompletion:(CDUnknownBlockType)arg1;
- (CDStruct_90e2a262)_coordinateRegionFromRepresentation:(id)arg1;
- (id)_representationForCoordinateRegion:(CDStruct_90e2a262)arg1;
- (BOOL)restoreViewportFromDictionary:(id)arg1;
- (id)viewportDictionary;
- (CDStruct_90e2a262)convertRect:(struct CGRect)arg1 toRegionFromView:(id)arg2;
- (struct CGRect)convertRegion:(CDStruct_90e2a262)arg1 toRectToView:(id)arg2;
- (struct CGPoint)convertCoordinate:(CDStruct_c3b9c2ee)arg1 toPointToView:(id)arg2;
- (CDStruct_c3b9c2ee)convertPoint:(struct CGPoint)arg1 toCoordinateFromView:(id)arg2;
- (void)setVisibleMapRect:(CDStruct_90e2a262)arg1 edgePadding:(CDStruct_3c058996)arg2 animated:(BOOL)arg3;
- (void)setVisibleMapRect:(CDStruct_90e2a262)arg1 animated:(BOOL)arg2;
@property(nonatomic) CDStruct_90e2a262 visibleMapRect;
- (CDStruct_90e2a262)visibleMapRectOfInterest;
- (id)_mapRegion;
- (void)_setLabelEdgeInsets:(CDStruct_3c058996)arg1;
- (CDStruct_3c058996)_labelEdgeInsets;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_updateInsets;
- (void)_setEdgeInsets:(CDStruct_3c058996)arg1 explicit:(BOOL)arg2;
- (void)_setEdgeInsets:(CDStruct_3c058996)arg1;
- (CDStruct_3c058996)_edgeInsets;
- (id)_mapRegionWithCenterCoordinate:(CDStruct_c3b9c2ee)arg1 zoomScale:(double)arg2;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 zoomLevel:(double)arg2 animated:(BOOL)arg3;
@property(nonatomic) CDStruct_c3b9c2ee centerCoordinate;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 animated:(BOOL)arg2;
- (double)zoomLevel;
- (double)zoomScale;
- (double)_zoomScaleForMapRegion:(id)arg1;
- (CDStruct_90e2a262)_mapRectThatFits:(CDStruct_90e2a262)arg1 edgePadding:(CDStruct_3c058996)arg2 viewInsets:(CDStruct_3c058996)arg3 snapToZoomLevel:(BOOL)arg4;
- (CDStruct_90e2a262)mapRectThatFits:(CDStruct_90e2a262)arg1 edgePadding:(CDStruct_3c058996)arg2;
- (CDStruct_90e2a262)mapRectThatFits:(CDStruct_90e2a262)arg1;
- (CDStruct_90e2a262)_regionThatFits:(CDStruct_90e2a262)arg1 edgePadding:(CDStruct_3c058996)arg2 snapToZoomLevel:(BOOL)arg3;
- (CDStruct_90e2a262)regionThatFits:(CDStruct_90e2a262)arg1 edgePadding:(CDStruct_3c058996)arg2;
- (CDStruct_90e2a262)regionThatFits:(CDStruct_90e2a262)arg1;
- (void)setRegion:(CDStruct_90e2a262)arg1 animated:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_setRegion:(CDStruct_90e2a262)arg1 snapToZoomLevel:(BOOL)arg2 animated:(BOOL)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setRegion:(CDStruct_90e2a262)arg1 animated:(BOOL)arg2;
@property(nonatomic) CDStruct_90e2a262 region;
- (void)_addSetRegionBlockWhenSized:(CDUnknownBlockType)arg1;
- (BOOL)_mustWaitUntilSized;
- (void)_updateMapType;
@property(nonatomic) unsigned long long mapType;
- (void)_logTimeSpentInCurrentMapMode;
- (void)simulateInertiaRotationUpdatesWithFocusPoint:(struct CGPoint)arg1 duration:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)simulateInertiaPanUpdatesWithDuration:(double)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)simulateInertiaPinchUpdatesWithFocusPoint:(struct CGPoint)arg1 duration:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)runAnimationWithDuration:(double)arg1 interval:(double)arg2 animationHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)stopCurrentAnimation;
- (id)_mapAttribution;
- (void)updateAttribution;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)_updatePitchAllowed;
- (BOOL)isShowingFlyover;
- (void)rotateMapWithFocusPoint:(struct CGPoint)arg1 angle:(double)arg2 duration:(double)arg3;
- (void)triggerZoomingInertia;
- (void)triggerRotationInertia;
- (void)stopZoomingWithInertia;
- (void)stopRotationWithInertia;
- (void)startLinearZoomIn:(BOOL)arg1;
- (void)startLinearRotationRight:(BOOL)arg1 slowMotion:(BOOL)arg2;
- (void)_setShowsCurrentEnvironmentName:(BOOL)arg1;
- (BOOL)_showsCurrentEnvironmentName;
- (void)_updateEnvironmentLabelText;
- (BOOL)_isUsingDevResourceStyleSheet;
- (void)zoomOut:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)snapToNorthAndExit3DMode:(id)arg1;
- (void)snapToNorth:(id)arg1;
- (double)pitch;
- (double)yaw;
- (double)presentationYaw;
- (void)_updateZoomControlsVisiblility;
- (void)_updateCompassVisiblility;
@property(nonatomic, getter=isPitchEnabled) BOOL pitchEnabled; // @synthesize pitchEnabled=_pitchEnabled;
@property(nonatomic) BOOL showsBuildings;
@property(nonatomic) BOOL showsPointsOfInterest;
- (void)exit3DMode;
- (void)enter3DMode;
- (id)_mapLayer;
- (id)vk_mapLayer;
- (BOOL)isFlipped;
- (id)makeCompassIfNeeded;
- (id)makeZoomButtonsIfNeeded;
- (void)_updateBackgroundStateNow;
- (void)_updateBackgroundStateSoon;
- (void)windowDidChangeOcclusionState:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)dealloc;
- (id)commonInitFromIB:(BOOL)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_layoutBottomViews;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)resizeSubviewsWithOldSize:(struct CGSize)arg1;
- (void)_fireDelayedRegionChangeIfNecessary;
- (void)setFrame:(struct CGRect)arg1;
- (void)_forceMapViewLayout;
- (void)_setSafeDelegate:(id)arg1;
@property(retain) NSView *settingsView; // @synthesize settingsView=_settingsView;
- (id)initWithFrame:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (long long)labelTextSize;
- (void)setLabelTextSize:(long long)arg1;
- (BOOL)allowDatelineWraparound;
- (void)setAllowDatelineWraparound:(BOOL)arg1;
- (BOOL)trafficEnabled;
- (void)setTrafficEnabled:(BOOL)arg1;
- (BOOL)localizeLabels;
- (void)setLocalizeLabels:(BOOL)arg1;
- (void)_snapToNorthIfNecessary;
- (void)_updateCameraState;
- (void)_updateFromCamera:(id)arg1;
- (void)_updateFromCamera:(id)arg1 duration:(double)arg2 timing:(CDUnknownBlockType)arg3;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timing:(CDUnknownBlockType)arg3;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (void)_setCamera:(id)arg1 animated:(BOOL)arg2;
- (void)_setCamera:(id)arg1;
- (id)_camera;
@property(nonatomic) __weak id <MKMapViewDelegate> delegate; // @dynamic delegate;
@property(readonly, nonatomic, getter=_detailedDescription) NSString *detailedDescription;
@property(readonly, nonatomic, getter=_visibleTileSets) NSArray *visibleTileSets;
- (void)_focusAccessibilityItemWithDelta:(long long)arg1;
- (void)focusPreviousAccessibilityItem;
- (void)focusNextAccessibilityItem;
- (id)accessibilityChildren;
- (id)accessibilityVisibleChildren;
@property(readonly, retain) NSOrderedSet *accessibilityItems; // @dynamic accessibilityItems;
- (void)_checkIfNeedToUpdateAccessibilityItems;
- (void)setNeedsUpdateAccessibilityItems:(BOOL)arg1;
- (void)_updateAccessibilityItemsNow;
- (id)accessibilityItemAtPoint:(struct CGPoint)arg1;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (struct CGRect)_convertMapRect:(CDStruct_90e2a262)arg1 toRectToView:(id)arg2;
- (CDStruct_90e2a262)_convertRect:(struct CGRect)arg1 toMapRectFromView:(id)arg2;
- (CDStruct_90e2a262)_convertRect:(struct CGRect)arg1 toRegionFromView:(id)arg2;
- (struct CGRect)_convertRegion:(CDStruct_90e2a262)arg1 toRectToView:(id)arg2;
- (CDStruct_c3b9c2ee)_convertPoint:(struct CGPoint)arg1 toMapPointFromView:(id)arg2;
- (struct CGPoint)_convertMapPoint:(CDStruct_c3b9c2ee)arg1 toPointToView:(id)arg2;
- (CDStruct_c3b9c2ee)_convertPoint:(struct CGPoint)arg1 toCoordinateFromView:(id)arg2;
- (struct CGPoint)_convertCoordinate:(CDStruct_c3b9c2ee)arg1 toPointToView:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

