//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSOutlineView.h"

@class IOBluetoothDevice, IOBluetoothDeviceInquiry, NSArray, NSMutableArray, NSString, NSTableColumn, ObjectOutlineDataSource;

@interface IOBluetoothDeviceInquiryOutlineView : NSOutlineView
{
    IOBluetoothDeviceInquiry *_inquiry;
    ObjectOutlineDataSource *_currentOutlineViewStorage;
    ObjectOutlineDataSource *_outlineViewStorageAllDevices;
    ObjectOutlineDataSource *_outlineViewStorageFiltered;
    int _inquiryIterations;
    unsigned int _displayExtendedInfoBits;
    unsigned int _majorServiceClass;
    unsigned int _majorDeviceClass;
    unsigned int _minorDeviceClass;
    int _tmpDevicesRemaining;
    unsigned char _deviceTypeFilter;
    unsigned char _deviceCategoryFilter;
    NSArray *_favoriteDevices;
    NSArray *_recentDevices;
    NSMutableArray *_discoveredDevices;
    NSString *_lastColumnSelected;
    NSMutableArray *_expandedCategories;
    NSTableColumn *_addressColumn;
    IOBluetoothDevice *_updatingNameOfDevice;
    void *_expansion;
    void *_expansion2;
    BOOL _updateNewDeviceNames;
    BOOL _busy;
    BOOL _infSearch;
}

@property(copy) NSArray *recentDevices; // @synthesize recentDevices=_recentDevices;
@property(copy) NSArray *favoriteDevices; // @synthesize favoriteDevices=_favoriteDevices;
@property(retain) IOBluetoothDevice *updatingNameOfDevice; // @synthesize updatingNameOfDevice=_updatingNameOfDevice;
@property BOOL updateNewDeviceNames; // @synthesize updateNewDeviceNames=_updateNewDeviceNames;
@property BOOL searchInfinitely; // @synthesize searchInfinitely=_infSearch;
@property(retain) IOBluetoothDeviceInquiry *inquiry; // @synthesize inquiry=_inquiry;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (int)numberOfDevicesFound;
- (void)sortForTableColumnWithIdentifier:(id)arg1 selectedDevice:(id)arg2;
- (id)getDeviceAtRow:(int)arg1;
- (void)setDisplayExtendedInfoBits:(unsigned int)arg1;
- (void)expandAllCategories;
- (void)setDeviceAddressColumnHidden:(BOOL)arg1;
- (id)selectedDevice;
- (void)setDeviceTypeFilter:(unsigned char)arg1 deviceCategoryFilter:(unsigned char)arg2;
- (int)iterations;
- (unsigned int)minorDeviceClass;
- (unsigned int)majorDeviceClass;
- (unsigned int)majorServiceClass;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (void)deviceInquiryComplete:(id)arg1 error:(int)arg2 aborted:(BOOL)arg3;
- (void)deviceInquiryIterationComplete:(id)arg1;
- (void)deviceInquiryDeviceNameUpdatedDelayed:(id)arg1;
- (void)deviceInquiryDeviceNameUpdated:(id)arg1 device:(id)arg2 devicesRemaining:(unsigned int)arg3;
- (void)deviceInquiryNameRequestUpdateStarted:(id)arg1 device:(id)arg2 devicesRemaining:(int)arg3;
- (void)deviceInquiryUpdatingDeviceNamesStarted:(id)arg1 devicesRemaining:(unsigned int)arg2;
- (void)deviceInquiryDeviceFound:(id)arg1 device:(id)arg2;
- (void)deviceInquiryStarted:(id)arg1;
- (BOOL)deviceMatchesCategoryFilter:(id)arg1;
- (BOOL)deviceMatchesTypeFilter:(id)arg1;
- (void)syncTableDataStates;
- (id)getTableTypeStringForDevice:(id)arg1;
- (id)getTableNameStringForDevice:(id)arg1;
- (BOOL)addOrUpdateTableItemWithDevice:(id)arg1;
- (void)importItemsIntoTableWithArrayOfDeviceAddressStrings:(id)arg1;
- (void)clearInquiryResults:(id)arg1;
- (BOOL)isBusy;
- (void)stop;
- (id)getInquiryResults;
- (void)startLastInquiryAgain:(BOOL)arg1;
- (int)startInquiryForDevicesOfServiceClass:(unsigned int)arg1 majorDeviceClass:(unsigned int)arg2 minorDeviceClass:(unsigned int)arg3 length:(int)arg4;
- (int)startInquiryForDevicesOfServiceClass:(unsigned int)arg1 majorDeviceClass:(unsigned int)arg2 minorDeviceClass:(unsigned int)arg3 length:(int)arg4 searchAttributes:(struct IOBluetoothDeviceSearchAttributes *)arg5;
- (int)startInquiryForDevicesOfServiceClass:(unsigned int)arg1 majorDeviceClass:(unsigned int)arg2 minorDeviceClass:(unsigned int)arg3 length:(int)arg4 maxNumberOfResults:(int)arg5 searchAttributes:(struct IOBluetoothDeviceSearchAttributes *)arg6;
- (void)dealloc;
- (void)awakeFromNib;

@end

