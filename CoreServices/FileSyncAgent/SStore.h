//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSManagedObject.h"

#import "VersionVectorStore.h"

@class LogFormatter, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSSet, NSString, SPeer, SRootNode, SStoreFileOperator, SStorePackageState, SStore_expansion1X, SVersionVectorManager, VersionVector;

@interface SStore : NSManagedObject <VersionVectorStore>
{
    BOOL _abort;
    unsigned int _currentExclInclSetMask;
    int _numExclInclSets;
    NSArray *_exclusions;
    NSArray *_inclusions;
    NSArray *_optimizedExclusionsPreds;
    NSArray *_optimizedExclusionsMasks;
    LogFormatter *_lf;
    BOOL _dumpTreeToBOM;
    BOOL _moveToTrash;
    BOOL _noBlockDiffCopying;
    NSString *_dumpTreeBOMPath;
    int _randomFSEventsFailureRate;
    int _randomScanFailureRate;
    SStoreFileOperator *_srcOperator;
    SStoreFileOperator *_dstOperator;
    BOOL _createdTurdFile;
    BOOL _hadStateTreeTurdFile;
    BOOL _preparingForSync;
    BOOL _performedFullScan;
    NSMutableArray *_movedItems;
    NSMutableSet *_updatedDirs;
    NSMutableArray *_tempFiles;
    NSMutableArray *_tempDirs;
    NSString *_turdFilePath;
    NSMutableDictionary *_parentOperators;
    SStorePackageState *_packageState;
    SPeer *_peer;
    int _randomFSOpFailureRate;
    NSString *_rootPath;
    NSString *_storeDir;
    NSString *_storePath;
    SVersionVectorManager *_vvManager;
    VersionVector *_rootVersionVectorAtOpen;
    unsigned short _excludedIncludedVersionCache;
    BOOL _haveReverificationFailure;
    NSDictionary *_vvReductionTable;
    NSNumber *_partialUpdateVersionID;
    unsigned int _allDirsItemsCount;
    unsigned int _curDirItemsCount;
    unsigned int _maxDirItemsCount;
    unsigned int _numDirsProcessedCount;
    BOOL __creating;
    SRootNode *__stateTree;
    NSString *__storeIDString;
}

+ (id)storeKeyForThreadDictionaryFromStore:(id)arg1;
+ (id)storeKeyForThreadDictionaryFromStoreIDString:(id)arg1;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (BOOL)accessInstanceVariablesDirectly;
+ (void)initialize;
+ (void)ensureSSHKeysConfiguredWithLocalHomeDir:(id)arg1 remoteHomeDir:(id)arg2;
+ (id)newStoreWithID:(id)arg1 storeIDStringForNewStore:(id)arg2 rootPath:(id)arg3 storePath:(id)arg4 entityName:(id)arg5 resetDB:(BOOL)arg6;
+ (id)_loadStoreFromCoreData:(id)arg1;
+ (id)_getCoreDataManagedObjectContextAtPath:(id)arg1 forStoreIDString:(id)arg2;
@property(readonly, nonatomic) unsigned int numDirsProcessedCount; // @synthesize numDirsProcessedCount=_numDirsProcessedCount;
@property(readonly, nonatomic) unsigned int maxDirItemsCount; // @synthesize maxDirItemsCount=_maxDirItemsCount;
@property(readonly, nonatomic) unsigned int allDirsItemsCount; // @synthesize allDirsItemsCount=_allDirsItemsCount;
@property(retain, nonatomic) SVersionVectorManager *vvManager; // @synthesize vvManager=_vvManager;
@property(retain, nonatomic) NSDictionary *versionVectorReductionTable; // @synthesize versionVectorReductionTable=_vvReductionTable;
@property(retain, nonatomic) NSString *turdFilePath; // @synthesize turdFilePath=_turdFilePath;
@property(copy, nonatomic) NSString *storePath; // @synthesize storePath=_storePath;
@property(copy, nonatomic) NSString *storeDir; // @synthesize storeDir=_storeDir;
@property(retain, nonatomic) VersionVector *rootVersionVectorAtOpen; // @synthesize rootVersionVectorAtOpen=_rootVersionVectorAtOpen;
@property(copy, nonatomic) NSString *rootPath; // @synthesize rootPath=_rootPath;
@property(readonly, nonatomic) int randomScanFailureRate; // @synthesize randomScanFailureRate=_randomScanFailureRate;
@property(nonatomic) int randomFSOpFailureRate; // @synthesize randomFSOpFailureRate=_randomFSOpFailureRate;
@property(nonatomic) BOOL performedFullScan; // @synthesize performedFullScan=_performedFullScan;
@property(retain, nonatomic) SPeer *peer; // @synthesize peer=_peer;
@property(retain, nonatomic) NSNumber *partialUpdateVersionID; // @synthesize partialUpdateVersionID=_partialUpdateVersionID;
@property(retain, nonatomic) SStorePackageState *packageState; // @synthesize packageState=_packageState;
@property(readonly, nonatomic) BOOL noBlockDiffCopying; // @synthesize noBlockDiffCopying=_noBlockDiffCopying;
@property(retain, nonatomic) LogFormatter *logFormatter; // @synthesize logFormatter=_lf;
@property(nonatomic) BOOL hadStateTreeTurdFile; // @synthesize hadStateTreeTurdFile=_hadStateTreeTurdFile;
@property(nonatomic) unsigned int currentExclusionInclusionSetMask; // @synthesize currentExclusionInclusionSetMask=_currentExclInclSetMask;
@property(nonatomic) BOOL createdTurdFile; // @synthesize createdTurdFile=_createdTurdFile;
- (void)updateNodeInfoForNode:(id)arg1;
- (void)setModDate:(id)arg1 atPath:(id)arg2;
@property(readonly, nonatomic) BOOL requiresAppleDoubleFiles;
- (id)prepareDirectoryForSyncHistory;
- (void)moveDirectoryAtPath:(id)arg1 toPath:(id)arg2;
- (void)makeDirectoryAtPath:(id)arg1;
@property(readonly, nonatomic) BOOL isRemote;
@property(readonly, nonatomic) BOOL isFileSystem;
@property(readonly, nonatomic) BOOL canCopyToFileSystem;
@property(readonly, nonatomic) BOOL canCopyFromFileSystem;
- (void)logTreeToLog:(id)arg1 verbosity:(int)arg2;
- (void)logTreeAfterPrepareForSync;
- (void)logTreeBeforePrepareForSync;
- (void)dumpTreeToBOMFile:(id)arg1;
- (void)dumpLogFormatter:(id)arg1 toSyncSpecialLog:(id)arg2;
- (void)descriptionOfTreeIntoLogFormatter:(id)arg1 verbosity:(int)arg2 header:(id)arg3;
- (void)copyTreeWithName:(id)arg1;
- (id)objectForObjectIDAsURI:(id)arg1;
- (void)commitToDisk;
- (void)resolveConflict:(id)arg1 peerName:(id)arg2;
- (id)latestStoreNodeInfoForNode:(id)arg1;
- (id)latestStoreNodeInfoForPath:(id)arg1;
- (id)pathOnDiskForNodeID:(unsigned long long)arg1;
- (void)deleteFileAtPath:(id)arg1;
- (void)deepDeleteDirectory:(id)arg1 moveToTempFirst:(BOOL)arg2;
- (void)updateProgressWithItemPath:(id)arg1 completedBytes:(unsigned long long)arg2 completedItems:(unsigned int)arg3;
- (void)updateProgressBytes:(unsigned long long)arg1;
- (id)verifiedLocalPathForHoardedNode:(id)arg1;
- (id)tentativeLocalPathForHoardedNode:(id)arg1;
- (void)lockAndOpenObjectsAtHoardAndSourceNode:(id)arg1;
- (void)lockAndOpenObjectsAtDestinationNode:(id)arg1 andSourceNode:(id)arg2 hoardedAtLocalPath:(id)arg3;
- (void)lockAndOpenObjectsAtDestinationNode:(id)arg1 andSourceNode:(id)arg2 writingToSource:(BOOL)arg3;
- (void)closeAndUnlockOperators;
- (id)unchangedPackageItem:(id)arg1;
- (void)lockPackageRoot:(id)arg1;
- (void)endPackageFailed:(BOOL)arg1 sourcePeer:(id)arg2;
- (void)beginPackageAtNode:(id)arg1 sourcePeer:(id)arg2;
- (void)moveObjectAtNode:(id)arg1 toNode:(id)arg2 finalLocationVersion:(id)arg3;
- (void)moveHoardedNode:(id)arg1 toNode:(id)arg2 deepCopy:(BOOL)arg3 hoardedAtLocalPath:(id)arg4;
- (void)deleteObjectAtNode:(id)arg1;
- (void)copyNodeToHoard:(id)arg1 inPeer:(id)arg2 deepCopy:(BOOL)arg3;
- (void)copyNode:(id)arg1 inPeer:(id)arg2 toNode:(id)arg3 deepCopy:(BOOL)arg4;
- (id)parentOperatorForOperator:(id)arg1;
- (id)newFileOperatorWithPath:(id)arg1 writing:(BOOL)arg2 isDirToFS:(BOOL)arg3 isSymlink:(BOOL)arg4;
- (id)newFileOperatorWithNode:(id)arg1 writing:(BOOL)arg2 isDirToFS:(BOOL)arg3 isSymlink:(BOOL)arg4;
- (id)checksumWithType:(id)arg1 forNode:(id)arg2;
- (id)pathComponentsForPathOnDisk:(id)arg1;
- (id)nodesWithVersionVectorsNotInSetOfCanonicalDescriptions:(id)arg1 prefetchObjects:(BOOL)arg2;
- (id)myNodeForNode:(id)arg1 isDestNode:(BOOL)arg2;
- (id)findParentForPathOnDisk:(id)arg1 descendIntoPackages:(BOOL)arg2;
- (id)findParentForPathFromRoot:(id)arg1 descendIntoPackages:(BOOL)arg2;
- (id)findNodeForPathOnDisk:(id)arg1 descendIntoPackages:(BOOL)arg2;
- (id)findNodeForPathFromRoot:(id)arg1 descendIntoPackages:(BOOL)arg2;
- (id)findDeepestNodeForPathOnDisk:(id)arg1 descendIntoPackages:(BOOL)arg2 remainingComponents:(id *)arg3;
- (id)findDeepestNodeForPathFromRoot:(id)arg1 descendIntoPackages:(BOOL)arg2 remainingComponents:(id *)arg3;
- (id)nodesWasChangedWhileExcluded;
- (id)dirsWithNeedsRescanIncludeBroken:(BOOL)arg1;
- (void)disconnectFromStore;
- (void)willProcessWriteJob;
- (void)processedUpdateVersionsJobAtNode:(id)arg1;
- (void)prepareForSync;
- (void)handedOffToPeer:(id)arg1;
- (void)flagParentsOfWasChangedWhileExcluded;
- (void)finishedSyncing;
- (void)abortSync;
- (void)updateTreeWithNodeData:(id)arg1;
- (void)moveNode:(id)arg1 toParent:(id)arg2 newName:(id)arg3 finalLocationVersion:(id)arg4;
- (void)deleteNode:(id)arg1;
- (id)dataForNodes:(id)arg1;
- (unsigned int)calculateNodeExclusionsInclusions:(id)arg1;
- (id)addNodeWithName:(id)arg1 parent:(id)arg2;
- (id)addNodeWithName:(id)arg1 info:(id)arg2 parent:(id)arg3;
@property(retain, nonatomic) NSDictionary *storeSyncHistory;
@property(retain, nonatomic) NSString *storeIDString; // @dynamic storeIDString;
@property(nonatomic) long long quota;
@property(nonatomic) BOOL isStateTreeClean;
@property(retain, nonatomic) SStore_expansion1X *expansion1X;
@property(nonatomic) unsigned short excludedIncludedVersion;
- (void)setExclusions:(id)arg1 andInclusions:(id)arg2;
@property(readonly, nonatomic) NSNumber *versionID;
@property(readonly, retain, nonatomic) NSString *tempDirPath;
@property(readonly, nonatomic) BOOL supportsSymlinks;
@property(readonly, nonatomic) BOOL supportsServerSideCopy;
@property(readonly, nonatomic) BOOL supportsHardLinks;
@property(readonly, nonatomic) BOOL supportsFileModes;
@property(readonly, nonatomic) BOOL supportsExtendedAttributes;
@property(readonly, nonatomic) BOOL supportsDeepCopy;
@property(readonly, nonatomic) BOOL supportsChecksum;
@property(readonly, nonatomic) BOOL supportsBlockChecksums;
@property(readonly, nonatomic) BOOL supportsACLs;
- (id)storeID;
@property(readonly, nonatomic) BOOL stateTreeHasMeaningfulChanges;
@property(retain, nonatomic) SRootNode *stateTree; // @dynamic stateTree;
@property(readonly, retain, nonatomic) VersionVector *rootVersionVector;
@property(readonly, retain, nonatomic) NSArray *optimizedExclusions;
@property(readonly, retain, nonatomic) NSArray *inclusions;
@property(readonly, nonatomic) BOOL hasNodeIDs;
@property(readonly, retain, nonatomic) NSArray *exclusions;
@property(readonly, retain, nonatomic) NSDictionary *allUniqueStoreIDs;
@property(readonly, nonatomic) unsigned int allInclusionsBitMask;
@property(readonly, nonatomic) unsigned int allExclusionsBitMask;
- (id)descriptionShort;
- (void)dealloc;
- (void)didTurnIntoFault;
- (void)awakeFromInsert;
- (void)awakeFromFetch;
- (void)updateSubtree:(id)arg1;
- (void)updateStateTreeForceFullScan:(BOOL)arg1;
- (void)updateRoot;
- (void)updateChildren:(id)arg1;
- (void)deleteStateTreeTurdFile;
- (void)createStateTreeTurdFile;
- (Class)fileOperatorClass;
- (void)updatePreferences;
- (void)willUpdateTree;
- (void)willUpdateChildrenOfParent:(id)arg1;
- (void)willChangeUserFilesInParentNode:(id)arg1;
- (void)moveNode:(id)arg1 toNode:(id)arg2 keepDestInfo:(BOOL)arg3 finalLocationVersion:(id)arg4;
- (id)moveMissingNode:(id)arg1 toPathOnDisk:(id)arg2 exists:(BOOL)arg3;
- (void)findPkgInfoPackages;
- (void)endOfSyncSanityCheck;
- (void)didUpdateTreeFailed:(BOOL)arg1;
- (void)didUpdateChildrenOfParent:(id)arg1;
- (void)cleanupTree;
- (id)checkAndHandleMissingNode:(id)arg1 withID:(unsigned long long)arg2 exists:(BOOL)arg3 nodeTypeChanged:(BOOL)arg4;
- (void)checkAndHandleMissingNode:(id)arg1;
- (id)addOrUpdateChildNodeWithName:(id)arg1 andInfo:(id)arg2 forParent:(id)arg3 isNew:(char *)arg4;
- (id)addMovedItemFrom:(id)arg1 toParent:(id)arg2 childName:(id)arg3 srcExists:(BOOL)arg4;
- (void)addMovedItemFrom:(id)arg1 to:(id)arg2 srcExists:(BOOL)arg3;
- (void)reportException:(id)arg1 forNode:(id)arg2;
- (void)incrementVVForModifiedNode:(id)arg1 newNodeInfo:(id)arg2;
- (id)incrementVersionClock;
- (void)connectedToPeer:(id)arg1 atPath:(id)arg2;
- (void)closeStore;
- (void)addExclusionEAToNode:(id)arg1;
- (id)getManagedObjectContext;
- (void)_threadWillDie:(id)arg1;

// Remaining properties
@property(retain, nonatomic) NSData *exclusionsData; // @dynamic exclusionsData;
@property(retain, nonatomic) NSData *inclusionsData; // @dynamic inclusionsData;
@property(readonly, nonatomic, getter=storeIDString) NSString *storeID;
@property(retain, nonatomic) NSSet *storeIDs; // @dynamic storeIDs;
@property(retain, nonatomic) NSNumber *versionClock; // @dynamic versionClock;

@end

