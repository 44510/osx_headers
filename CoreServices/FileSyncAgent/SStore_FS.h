//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "SStore.h"

@class NSString, SSHIPCClient, VersionVector;

@interface SStore_FS : SStore
{
    struct FSRef _rootRef;
    short _vRefNum;
    struct FSAliasInfo _aliasInfo;
    unsigned int _aliasWhichInfo;
    VersionVector *_rootVV;
    struct __FSEventStream *_streamRef;
    BOOL _fsEventsFailed;
    BOOL _flushingFSEvents;
    BOOL _seenLastHistoricalFSEvent;
    double _lastTimeFSEventReceived;
    BOOL _disableFSEvents;
    unsigned long long _currentEventID;
    BOOL _disableDeepCopy;
    BOOL _hasNodeIDs;
    BOOL _isRemote;
    BOOL _requiresAppleDoubleFiles;
    BOOL _supportsACLs;
    BOOL _supportsExtendedAttributes;
    BOOL _supportsHardLinks;
    BOOL _supportsServerSideCopy;
    BOOL _supportsSymlinks;
    int _volumeDevT;
    NSString *_volumeRootPath;
    NSString *_localStorePath;
    NSString *_remoteStorePath;
    int _remoteStoreFD;
    BOOL _wasPrepareForSyncDoneRemotely;
    NSString *_remoteZippedStoreFileName;
    SSHIPCClient *_sshConnection;
    struct FSRef _lastItem;
    NSString *_lastItemPath;
    int _result;
    BOOL _stopCopyRL;
    unsigned long long _bytesCopied;
    unsigned int _itemsCopied;
}

+ (id)newStore_FSForPeer:(id)arg1 rootPath:(id)arg2 rootAlias:(struct AliasRecord **)arg3 rootRef:(struct FSRef *)arg4 storePath:(id)arg5 optionalStoreID:(id)arg6;
+ (id)newStore_FSForPeer:(id)arg1 alias:(struct AliasRecord **)arg2;
+ (void)ensureSSHKeysConfiguredWithLocalHomeDir:(id)arg1 remoteHomeDir:(id)arg2;
@property(retain, nonatomic) SSHIPCClient *sshConnection; // @synthesize sshConnection=_sshConnection;
@property(retain, nonatomic) NSString *remoteZippedStoreFileName; // @synthesize remoteZippedStoreFileName=_remoteZippedStoreFileName;
@property(nonatomic) BOOL wasPrepareForSyncDoneRemotely; // @synthesize wasPrepareForSyncDoneRemotely=_wasPrepareForSyncDoneRemotely;
@property(nonatomic) int remoteStoreFD; // @synthesize remoteStoreFD=_remoteStoreFD;
@property(retain, nonatomic) NSString *remoteStorePath; // @synthesize remoteStorePath=_remoteStorePath;
@property(retain, nonatomic) NSString *localStorePath; // @synthesize localStorePath=_localStorePath;
@property(retain, nonatomic) NSString *volumeRootPath; // @synthesize volumeRootPath=_volumeRootPath;
@property(nonatomic) int volumeDevT; // @synthesize volumeDevT=_volumeDevT;
@property(nonatomic) BOOL supportsSymlinks; // @synthesize supportsSymlinks=_supportsSymlinks;
@property(nonatomic) BOOL supportsServerSideCopy; // @synthesize supportsServerSideCopy=_supportsServerSideCopy;
@property(nonatomic) BOOL supportsHardLinks; // @synthesize supportsHardLinks=_supportsHardLinks;
@property(nonatomic) BOOL supportsExtendedAttributes; // @synthesize supportsExtendedAttributes=_supportsExtendedAttributes;
@property(nonatomic) BOOL supportsACLs; // @synthesize supportsACLs=_supportsACLs;
@property(nonatomic) BOOL requiresAppleDoubleFiles; // @synthesize requiresAppleDoubleFiles=_requiresAppleDoubleFiles;
@property(nonatomic) BOOL isRemote; // @synthesize isRemote=_isRemote;
@property(nonatomic) BOOL hasNodeIDs; // @synthesize hasNodeIDs=_hasNodeIDs;
- (id)checksumWithType:(id)arg1 forNode:(id)arg2;
- (void)setModDate:(id)arg1 atPath:(id)arg2;
- (id)latestStoreNodeInfoForPath:(id)arg1;
- (id)pathOnDiskForNodeID:(unsigned long long)arg1;
- (void)moveDirectoryAtPath:(id)arg1 toPath:(id)arg2;
- (void)makeDirectoryAtPath:(id)arg1;
- (void)deepDeleteDirectory:(id)arg1 moveToTempFirst:(BOOL)arg2;
- (id)unchangedPackageItem:(id)arg1;
- (id)myNodeForNode:(id)arg1 isDestNode:(BOOL)arg2;
- (void)prepareForSync;
- (id)prepareDirectoryForSyncHistory;
- (void)disconnectFromStore;
- (void)setVolumeUUID:(struct __CFUUID *)arg1;
- (void)setFsEventsUUID:(struct __CFUUID *)arg1;
- (void)setFsEventsLastEventID:(unsigned long long)arg1;
@property(readonly, nonatomic) struct __CFUUID *volumeUUID;
@property(readonly, nonatomic) BOOL useFSEvents;
- (BOOL)supportsFileModes;
- (BOOL)supportsDeepCopy;
- (BOOL)supportsChecksum;
- (id)rootVersionVector;
- (id)remoteStoreNodeInfoForNodeIfAvailable:(id)arg1;
- (struct FSRef *)refForNode:(id)arg1 isDir:(char *)arg2;
- (BOOL)isFileSystem;
@property(readonly, nonatomic) struct __CFUUID *fsEventsUUID;
@property(readonly, nonatomic) unsigned long long fsEventsLastEventID;
- (BOOL)canCopyToFileSystem;
- (BOOL)canCopyFromFileSystem;
- (void)verifyMount;
- (void)updateNodeInfoForNode:(id)arg1;
- (void)deleteStateTreeTurdFile;
- (void)createStateTreeTurdFile;
- (void)setupWithAlias:(struct AliasRecord **)arg1 andRef:(struct FSRef *)arg2;
- (void)dealloc;
- (void)updatePreferences;
- (void)updateSubtree:(id)arg1;
- (void)updateStateTreeForceFullScan:(BOOL)arg1;
- (void)updateRoot;
- (void)updateChildren:(id)arg1;
- (void)setFSEventsLastEventIDToNow;
- (void)registerForFSEvents;
- (void)processFSEventsForStream:(struct __FSEventStream *)arg1 paths:(const char **)arg2 times:(const unsigned long long *)arg3 flags:(const unsigned int *)arg4 numEvents:(int)arg5;
- (void)deregisterForFSEventsWithFlush:(BOOL)arg1;
- (void)addExclusionEAToNode:(id)arg1;
- (Class)fileOperatorClass;
- (BOOL)_hasStateTreeTurdFile;
- (void)_doUpdateNodeObject:(id)arg1 url:(id)arg2;
- (void)_doUpdateNodeObject:(id)arg1 ref:(const struct FSRef *)arg2;
- (void)_doUpdateDirectory:(id)arg1 url:(id)arg2 recurse:(BOOL)arg3;
- (void)_doUpdateDirectory:(id)arg1 ref:(struct FSRef *)arg2 recurse:(BOOL)arg3;
- (void)_deleteObjectRef:(struct FSRef *)arg1 withInfo:(struct FSCatalogInfo *)arg2;
- (void)_deleteObjectRef:(struct FSRef *)arg1;
- (void)_deleteDirectoryContents:(struct FSRef *)arg1;
- (void)_copyCallback:(struct __FSFileOperation *)arg1 currentItem:(const struct FSRef *)arg2 stage:(unsigned int)arg3 error:(int)arg4 status:(id)arg5;

@end

