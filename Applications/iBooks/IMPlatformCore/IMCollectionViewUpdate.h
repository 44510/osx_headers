//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class IMCollectionViewLayout, IMCollectionViewTransaction, NSArray, NSDate, NSDictionary, NSEvent, NSMutableArray, NSSet;

@interface IMCollectionViewUpdate : NSObject
{
    BOOL _expectingDropMoveTransactions;
    BOOL _didAcceptDropMoveTransactions;
    BOOL _hasChanges;
    BOOL _areChangesValid;
    BOOL _finish;
    BOOL _isDragAndDrop;
    BOOL _isDrop;
    int _hint;
    unsigned long long _sourceNumberOfItems;
    unsigned long long _targetNumberOfItems;
    IMCollectionViewLayout *_sourceLayout;
    IMCollectionViewLayout *_targetLayout;
    NSSet *_sourceVisibleCellIndexPaths;
    NSSet *_targetVisibleCellIndexPaths;
    NSDictionary *_sourceVisibleSupplementaryViewIndexPaths;
    NSDictionary *_targetVisibleSupplementaryViewIndexPaths;
    NSSet *_sourceVisibleDecorationViewKinds;
    NSSet *_targetVisibleDecorationViewKinds;
    NSDate *_timestamp;
    NSEvent *_dragEvent;
    NSMutableArray *_dragCellTransactions;
    NSMutableArray *_dropCellTransactios;
    IMCollectionViewTransaction *_emptyIndexPathTransaction;
    long long _updateCount;
    NSMutableArray *_indexMap;
    NSArray *_allChanges;
    NSArray *_cellChanges;
    NSArray *_supplementaryViewChanges;
    NSArray *_decorationViewChanges;
    NSArray *_dragAndDropChanges;
    NSMutableArray *_insertCellTransactions;
    NSMutableArray *_deleteCellTransactions;
    NSMutableArray *_updateCellTransactions;
    NSMutableArray *_moveCellTransactions;
    NSMutableArray *_insertSupplementaryViewTransactions;
    NSMutableArray *_deleteSupplementaryViewTransactions;
    NSMutableArray *_updateSupplementaryViewTransactions;
    NSMutableArray *_moveSupplementaryViewTransactions;
    NSMutableArray *_mutableCompletionBlocks;
    struct CGPoint _dropPoint;
}

+ (void)_shiftIndexMap:(id)arg1 fromIndex:(long long)arg2 toIndex:(long long)arg3 delta:(long long)arg4;
+ (id)updatedIndexMapFromIndexMap:(id)arg1 withMovesOrDrops:(id)arg2;
+ (id)updatedIndexMapFromIndexMap:(id)arg1 withDeletes:(id)arg2;
+ (id)updatedIndexMapFromIndexMap:(id)arg1 withInserts:(id)arg2;
+ (id)_bareIndexMapWithCount:(unsigned long long)arg1;
@property(nonatomic) BOOL isDrop; // @synthesize isDrop=_isDrop;
@property(nonatomic) BOOL isDragAndDrop; // @synthesize isDragAndDrop=_isDragAndDrop;
@property(retain, nonatomic) NSMutableArray *mutableCompletionBlocks; // @synthesize mutableCompletionBlocks=_mutableCompletionBlocks;
@property(nonatomic, getter=isFinished) BOOL finish; // @synthesize finish=_finish;
@property(retain, nonatomic) NSMutableArray *moveSupplementaryViewTransactions; // @synthesize moveSupplementaryViewTransactions=_moveSupplementaryViewTransactions;
@property(retain, nonatomic) NSMutableArray *updateSupplementaryViewTransactions; // @synthesize updateSupplementaryViewTransactions=_updateSupplementaryViewTransactions;
@property(retain, nonatomic) NSMutableArray *deleteSupplementaryViewTransactions; // @synthesize deleteSupplementaryViewTransactions=_deleteSupplementaryViewTransactions;
@property(retain, nonatomic) NSMutableArray *insertSupplementaryViewTransactions; // @synthesize insertSupplementaryViewTransactions=_insertSupplementaryViewTransactions;
@property(retain, nonatomic) NSMutableArray *moveCellTransactions; // @synthesize moveCellTransactions=_moveCellTransactions;
@property(retain, nonatomic) NSMutableArray *updateCellTransactions; // @synthesize updateCellTransactions=_updateCellTransactions;
@property(retain, nonatomic) NSMutableArray *deleteCellTransactions; // @synthesize deleteCellTransactions=_deleteCellTransactions;
@property(retain, nonatomic) NSMutableArray *insertCellTransactions; // @synthesize insertCellTransactions=_insertCellTransactions;
@property(nonatomic) BOOL areChangesValid; // @synthesize areChangesValid=_areChangesValid;
@property(nonatomic) BOOL hasChanges; // @synthesize hasChanges=_hasChanges;
@property(retain, nonatomic) NSArray *dragAndDropChanges; // @synthesize dragAndDropChanges=_dragAndDropChanges;
@property(retain, nonatomic) NSArray *decorationViewChanges; // @synthesize decorationViewChanges=_decorationViewChanges;
@property(retain, nonatomic) NSArray *supplementaryViewChanges; // @synthesize supplementaryViewChanges=_supplementaryViewChanges;
@property(retain, nonatomic) NSArray *cellChanges; // @synthesize cellChanges=_cellChanges;
@property(retain, nonatomic) NSArray *allChanges; // @synthesize allChanges=_allChanges;
@property(retain, nonatomic) NSMutableArray *indexMap; // @synthesize indexMap=_indexMap;
@property(nonatomic) long long updateCount; // @synthesize updateCount=_updateCount;
@property(nonatomic) int hint; // @synthesize hint=_hint;
@property(nonatomic) BOOL didAcceptDropMoveTransactions; // @synthesize didAcceptDropMoveTransactions=_didAcceptDropMoveTransactions;
@property(nonatomic) BOOL expectingDropMoveTransactions; // @synthesize expectingDropMoveTransactions=_expectingDropMoveTransactions;
@property(retain, nonatomic) IMCollectionViewTransaction *emptyIndexPathTransaction; // @synthesize emptyIndexPathTransaction=_emptyIndexPathTransaction;
@property(retain, nonatomic) NSMutableArray *dropCellTransactios; // @synthesize dropCellTransactios=_dropCellTransactios;
@property(retain, nonatomic) NSMutableArray *dragCellTransactions; // @synthesize dragCellTransactions=_dragCellTransactions;
@property(nonatomic) struct CGPoint dropPoint; // @synthesize dropPoint=_dropPoint;
@property(retain, nonatomic) NSEvent *dragEvent; // @synthesize dragEvent=_dragEvent;
@property(readonly, nonatomic) NSDate *timestamp; // @synthesize timestamp=_timestamp;
@property(retain, nonatomic) NSSet *targetVisibleDecorationViewKinds; // @synthesize targetVisibleDecorationViewKinds=_targetVisibleDecorationViewKinds;
@property(retain, nonatomic) NSSet *sourceVisibleDecorationViewKinds; // @synthesize sourceVisibleDecorationViewKinds=_sourceVisibleDecorationViewKinds;
@property(retain, nonatomic) NSDictionary *targetVisibleSupplementaryViewIndexPaths; // @synthesize targetVisibleSupplementaryViewIndexPaths=_targetVisibleSupplementaryViewIndexPaths;
@property(retain, nonatomic) NSDictionary *sourceVisibleSupplementaryViewIndexPaths; // @synthesize sourceVisibleSupplementaryViewIndexPaths=_sourceVisibleSupplementaryViewIndexPaths;
@property(retain, nonatomic) NSSet *targetVisibleCellIndexPaths; // @synthesize targetVisibleCellIndexPaths=_targetVisibleCellIndexPaths;
@property(retain, nonatomic) NSSet *sourceVisibleCellIndexPaths; // @synthesize sourceVisibleCellIndexPaths=_sourceVisibleCellIndexPaths;
@property(retain, nonatomic) IMCollectionViewLayout *targetLayout; // @synthesize targetLayout=_targetLayout;
@property(copy, nonatomic) IMCollectionViewLayout *sourceLayout; // @synthesize sourceLayout=_sourceLayout;
@property(nonatomic) unsigned long long targetNumberOfItems; // @synthesize targetNumberOfItems=_targetNumberOfItems;
@property(nonatomic) unsigned long long sourceNumberOfItems; // @synthesize sourceNumberOfItems=_sourceNumberOfItems;
- (void).cxx_destruct;
- (BOOL)_checkDropMovesAreConsistent:(id *)arg1;
- (BOOL)_checkDragTransactionWithNilEvent:(id *)arg1;
- (BOOL)_checkDragAndDropBounds:(id *)arg1;
- (BOOL)_checkDragAndDropTransactionTypes:(id *)arg1;
- (BOOL)_checkDragAndDropExclusive:(id *)arg1;
- (BOOL)_checkCanPerformDragAndDropUpdate:(id *)arg1;
- (BOOL)_checkDeletingAllDraggedItems:(id *)arg1;
- (BOOL)_checkDeletesAreConsistent:(id *)arg1;
- (BOOL)_checkMovesAreConsistent:(id *)arg1;
- (BOOL)_checkBounds:(id *)arg1;
- (BOOL)_checkBalance:(id *)arg1;
- (BOOL)_checkTransactionTypes:(id *)arg1;
- (BOOL)_checkFinished:(id *)arg1;
- (void)_updateChangesIfNeeded;
- (void)_addSupplementaryViewTransaction:(id)arg1;
- (void)_addCellTransaction:(id)arg1;
- (void)endUpdate;
- (void)beginUpdate;
- (BOOL)dropHasEffectiveMoves;
- (BOOL)matchMovesWithDropTransactions:(id *)arg1;
- (void)setLayoutsByInvalidatingLayout:(id)arg1;
@property(readonly, nonatomic) NSArray *completionBlocks;
- (void)addCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)canPerformUpdate:(id *)arg1;
- (void)addDropTransactions:(id)arg1 atPoint:(struct CGPoint)arg2;
- (void)addDragTransactions:(id)arg1 withEvent:(id)arg2;
- (void)addTransaction:(id)arg1;
- (void)finish;
- (id)description;
- (void)dealloc;
- (id)init;

@end

